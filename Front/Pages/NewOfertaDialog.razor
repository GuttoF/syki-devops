<MudDialog>
    <DialogContent>
        <MudForm @ref="form">
            <MudSelect @bind-Value="_campus" Label="Campus" Required="true" RequiredError="Informe o campus!" AdornmentColor="Color.Primary">
                @foreach (CampusOut? item in Campi)
                {
                    <MudSelectItem Value="@item">@item.Nome</MudSelectItem>
                }
            </MudSelect>
            <MudSelect @bind-Value="_curso" Label="Curso" Required="true" RequiredError="Informe o curso!" AdornmentColor="Color.Primary">
                @foreach (CursoOut? item in Cursos)
                {
                    <MudSelectItem Value="@item">@item.Nome</MudSelectItem>
                }
            </MudSelect>
            <MudSelect @bind-Value="_grade" Label="Grade" Required="true" RequiredError="Informe a grade!" AdornmentColor="Color.Primary">
                @foreach (GradeOut? item in Grades)
                {
                    <MudSelectItem Value="@item">@item.Nome</MudSelectItem>
                }
            </MudSelect>
            <MudSelect @bind-Value="_periodo" Label="Período" Required="true" RequiredError="Informe o período do curso!" AdornmentColor="Color.Primary">
                @foreach (string? item in Periodos)
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>
            <MudSelect @bind-Value="_turno" Label="Turno" Required="true" RequiredError="Informe o turno do curso!" AdornmentColor="Color.Primary">
                @foreach (Turno? item in Enum.GetValues(typeof(Turno)))
                {
                    <MudSelectItem Value="@item">@item.GetDescription()</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Salvar</MudButton>
    </DialogActions>
</MudDialog>

@using Syki.Dtos
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject HttpClient httpClient
@inject ISnackbar Snackbar

@code {
    MudForm form;
    CampusOut? _campus;
    CursoOut? _curso;
    GradeOut? _grade;
    string? _periodo;
    Turno? _turno;

    OfertaIn data = new();

    List<CampusOut> Campi = new();
    List<CursoOut> Cursos = new();
    List<GradeOut> Grades = new();
    List<string> Periodos = new();

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Campi = await httpClient.GetFromJsonAsync<List<CampusOut>>("/campi") ?? new();
        Cursos = await httpClient.GetFromJsonAsync<List<CursoOut>>("/cursos") ?? new();
        Grades = await httpClient.GetFromJsonAsync<List<GradeOut>>("/grades") ?? new();
        Periodos = await httpClient.GetFromJsonAsync<List<string>>("/periodos") ?? new();
    }

    async Task Submit()
    {
        await form.Validate();
        if (!form.IsValid) return;

        data = new()
        {
            CampusId = _campus!.Id,
            CursoId = _curso!.Id,
            GradeId = _grade!.Id,
            Periodo = _periodo!,
            Turno = _turno!.Value,
        };
        await httpClient.PostAsJsonAsync("/ofertas", data);

        MudDialog.Close(DialogResult.Ok(true));

        Snackbar.Add("Oferta cadastrada com sucesso!", Severity.Success);
    }

    void Cancel() => MudDialog.Cancel();
}
