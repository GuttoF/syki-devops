@page "/ofertas"

<PageTitle>Ofertas</PageTitle>

<MudContainer>
    <MudCard Class="mt-8 mb-4 mx-6 px-2">
        <MudCardContent>
            <MudStack Row="true" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h5" Style="font-weight: bold" >Ofertas</MudText>
                <MudSpacer />
                <MudButton
                    StartIcon="@Icons.Material.Outlined.Add"
                    IconSize="Size.Large"
                    Variant="Variant.Filled"
                    Style="height: 40px;"
                    Color="Color.Primary"
                    @onclick="OpenDialog"
                >
                    Nova Oferta
                </MudButton>
            </MudStack>
        </MudCardContent>
    </MudCard>

    <MudContainer Class="mb-8">
        <MudDataGrid Class="pa-4" Items="@_ofertas" QuickFilter="@_quickFilter" Hover="true">
            <ToolBarContent>
                <MudSpacer />
                <MudSpacer />
                <MudTextField
                    Margin="Margin.Dense"
                    Variant="Variant.Outlined"
                    @bind-Value="_searchString"
                    Placeholder="Busque por qualquer atributo"
                    Adornment="Adornment.Start"
                    Immediate="true"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    IconSize="Size.Medium"
                    Class="mt-0"
                />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Id" Title="Id" />
                <PropertyColumn Property="x => x.Campus" Title="Campus" />
                <PropertyColumn Property="x => x.Periodo" Title="Período" />
                <PropertyColumn Property="x => x.Turno.GetDescription()" Title="Turno" />
                <PropertyColumn Property="x => x.Curso" Title="Curso" />
                <PropertyColumn Property="x => x.Grade" Title="Grade" />
            </Columns>
            <PagerContent>
                <MudDataGridPager T="OfertaOut" RowsPerPageString="Linhas por página:" InfoFormat="{first_item}-{last_item} de {all_items}" />
            </PagerContent>
        </MudDataGrid>
    </MudContainer>
</MudContainer>

@using Syki.Dtos
@inject HttpClient Http
@inject IDialogService DialogService

@code {
    private string _searchString;
    private List<OfertaOut> _ofertas = new();

    protected override async Task OnInitializedAsync()
    {
        _ofertas = await Http.GetFromJsonAsync<List<OfertaOut>>("/ofertas") ?? new();
    }

    private Func<OfertaOut, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Campus.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Periodo.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Turno.GetDescription().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Curso.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Grade.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private async Task OpenDialog()
    {
        var options = new DialogOptions {
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };
        var dialog = await DialogService.ShowAsync<NewOfertaDialog>("Nova Oferta", options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        
        await OnInitializedAsync();
    }
}
