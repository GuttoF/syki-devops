<MudDialog>
    <DialogContent>
        <MudForm @ref="form">
            <MudSelect @bind-Value="_disciplina" Label="Disciplina" Required="true" RequiredError="Informe a disciplina!" AdornmentColor="Color.Primary">
                @foreach (DisciplinaOut? item in Disciplinas)
                {
                    <MudSelectItem Value="@item">@item.Nome</MudSelectItem>
                }
            </MudSelect>
            <MudSelect @bind-Value="_professor" Label="Professor" Required="true" RequiredError="Informe o professor!" AdornmentColor="Color.Primary">
                @foreach (ProfessorOut? item in Professores)
                {
                    <MudSelectItem Value="@item">@item.Nome</MudSelectItem>
                }
            </MudSelect>
            <MudSelect @bind-Value="_periodo" Label="Período" Required="true" RequiredError="Informe o período!" AdornmentColor="Color.Primary">
                @foreach (string? item in Periodos)
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Salvar</MudButton>
    </DialogActions>
</MudDialog>

@using Syki.Dtos
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject HttpClient httpClient
@inject ISnackbar Snackbar

@code {
    MudForm form;
    DisciplinaOut? _disciplina;
    ProfessorOut? _professor;
    string? _periodo;

    TurmaIn data = new();

    List<DisciplinaOut> Disciplinas = new();
    List<ProfessorOut> Professores = new();
    List<string> Periodos = new();

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Disciplinas = await httpClient.GetFromJsonAsync<List<DisciplinaOut>>("/disciplinas") ?? new();
        Professores = await httpClient.GetFromJsonAsync<List<ProfessorOut>>("/professores") ?? new();
        Periodos = await httpClient.GetFromJsonAsync<List<string>>("/periodos") ?? new();
    }

    async Task Submit()
    {
        await form.Validate();
        if (!form.IsValid) return;

        data = new()
        {
            DisciplinaId = _disciplina!.Id,
            ProfessorId = _professor!.Id,
            Periodo = _periodo!,
        };
        await httpClient.PostAsJsonAsync("/turmas", data);

        MudDialog.Close(DialogResult.Ok(true));

        Snackbar.Add("Turma cadastrada com sucesso!", Severity.Success);
    }

    void Cancel() => MudDialog.Cancel();
}
