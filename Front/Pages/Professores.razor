@page "/professores"
@attribute [Authorize(Roles = "Academico")]

<PageTitle>Professores</PageTitle>

<MudContainer>
    <SykiPageHeader Icon="@Icons.Material.Filled.Person4" Title="Professores" ButtonText="Novo Professor" OnClick="OpenDialog"/>

    <MudAlert Class="mt-4 mb-4 mx-6 pl-6" Severity="Severity.Normal" Variant="Variant.Text">
        <MudText>Um professor pode lecionar várias disciplinas ao longo de um período, inclusive em mais de um campus.</MudText>
    </MudAlert>

    <MudContainer Class="mb-8">
        <MudDataGrid Class="pa-4" Items="@_professores" QuickFilter="@_quickFilter" Hover="true" Loading="_loading" Dense="true" RowsPerPage="10">
            <ToolBarContent>
                <MudSpacer />
                <MudSpacer />
                <MudTextField
                    Margin="Margin.Dense"
                    Variant="Variant.Outlined"
                    @bind-Value="_searchString"
                    Placeholder="Busque por nome"
                    Adornment="Adornment.Start"
                    Immediate="true"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    IconSize="Size.Medium"
                    Class="mt-0"
                />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Id" Title="Id" />
                <PropertyColumn Property="x => x.Nome" Title="Nome" />
            </Columns>

            <NoRecordsContent>
                Não existem professores cadastrados ainda.
            </NoRecordsContent>

            <PagerContent>
                <MudDataGridPager T="ProfessorOut" RowsPerPageString="Linhas por página:" InfoFormat="{first_item}-{last_item} de {all_items}" />
            </PagerContent>
        </MudDataGrid>
    </MudContainer>
</MudContainer>

@inject HttpClient Http
@inject IDialogService DialogService

@code {
    private bool _loading;
    private string _searchString;
    private List<ProfessorOut> _professores = new();

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _professores = await Http.GetFromJsonAsync<List<ProfessorOut>>("/professores") ?? new();
        _loading = false;
    }

    private Func<ProfessorOut, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Nome.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private async Task OpenDialog()
    {
        var options = new DialogOptions {
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };
        var dialog = await DialogService.ShowAsync<NewProfessorDialog>("", options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        
        await OnInitializedAsync();
    }
}
