@namespace Syki.Front.Pages.Student

@page "/student/activities"
@attribute [Authorize(Roles = "Student")]

<SykiPageTitle Title="Atividades" />

<MudContainer Class="my-4 px-4">
    <SykiPageHeader Icon="@Icons.Material.Filled.EditNote" Title="Atividades" />

    <MudContainer Class="px-0 my-4">
        <MudContainer Class="px-0 mb-4">
            <MudTable
                T="StudentActivityOut"
                Items="@_activities"
                Breakpoint="Breakpoint.Sm"
                Dense="true"
                Class="pa-4"
                Hover="true"
                Filter="@_quickFilter"
                Loading="@_loading"
                RowsPerPage="100"
            >
                <ToolBarContent>
                    <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por qualquer atributo"/>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Disciplina</MudTh>
                    <MudTh>Título</MudTh>
                    <MudTh>Tipo</MudTh>
                    <MudTh>Nota</MudTh>
                    <MudTh>Peso (%)</MudTh>
                    <MudTh>Limite de entrega</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Disciplina">@context.ClassName</MudTd>
                    <MudTd DataLabel="Título">@context.Title</MudTd>
                    <MudTd DataLabel="Tipo">@context.Type.GetDescription()</MudTd>
                    <MudTd DataLabel="Nota">@context.Note.GetDescription()</MudTd>
                    <MudTd DataLabel="Peso (%)">@context.Weight</MudTd>
                    <MudTd DataLabel="Limite de entrega">@context.GetDueDate()</MudTd>
                    <MudTd>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.RemoveRedEye" OnClick="@(() => OpenDrawer(context))" />
                    </MudTd>
                </RowTemplate>
                <LoadingContent>
                    @if (_breakpoint == Breakpoint.Xs)
                    {
                        <MudProgressLinear Color="Color.Info" Indeterminate="true"/>
                    }
                </LoadingContent>
                <NoRecordsContent>
                    @(GetNotFoundMessage())
                </NoRecordsContent>
            </MudTable>
        </MudContainer>
    </MudContainer>
</MudContainer>

<MudDrawer Anchor="Anchor.Right" @bind-Open="@_rightOpen" Variant="DrawerVariant.Temporary" OverlayAutoClose="true" Elevation="1" Width="460px">
	<MudDrawerHeader Class="justify-space-between px-4 py-1">
		<MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Spacing="3">
			<MudIcon Icon="@Icons.Material.Filled.BookmarkAdded"></MudIcon>
			<MudText Typo="Typo.h5"><b>Entregas</b></MudText>
		</MudStack>
		<MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="@CloseDrawer" />
	</MudDrawerHeader>
    <MudDivider DividerType="DividerType.Middle" />
    <MudDrawerContainer>
        <MudPaper Class="pa-4" Style="overflow-x: hidden" Elevation="0">
            <MudForm Spacing="0">
                <MudGrid Spacing="2">
                    <MudItem xs="12" sm="12" md="12" lg="12">
                        <SykiTextField Label="Link" AutoFocus="true" @bind-Value="@_link" />
                    </MudItem>
                </MudGrid>
            </MudForm>
            <DialogSaveButton OnClick="@Submit" />
        </MudPaper>
    </MudDrawerContainer>
</MudDrawer>

@inject ISnackbar Snackbar
@inject IBrowserViewportService BrowserViewportService
@inject GetStudentActivitiesClient GetStudentActivitiesClient
@inject CreateClassActivityWorkClient CreateClassActivityWorkClient

@code
{
    private bool _loading;
    private string _searchString;
    private Breakpoint _breakpoint;
    private List<StudentActivityOut> _activities = [];
    private Func<StudentActivityOut, bool> _quickFilter => x => _searchString.IsIn(x.Title, x.Description);
    
    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
        _activities = await GetStudentActivitiesClient.Get();
        _loading = false;
    }

    private string GetNotFoundMessage()
    {
        return _searchString.IsEmpty() ? "Não existem atividades ainda." : "Nenhuma atividade encontrada.";
    }

    private string _link;
    private bool _rightOpen;
    private StudentActivityOut _selectedActivity = new();
    private void OpenDrawer(StudentActivityOut activity)
    {
        _rightOpen = true;
        _selectedActivity = activity;
    }
    private void CloseDrawer()
    {
        _rightOpen = false;
    }
    private async Task Submit()
    {
        var result = await CreateClassActivityWorkClient.Create(_selectedActivity.Id, _link);
        if (result.IsSuccess())
        {
            Snackbar.Add("Entrega feita com sucesso!", Severity.Success);
            _link = string.Empty;
            CloseDrawer();
        }
        else
        {
            Snackbar.Add(result.GetError().Message, Severity.Error);
        }
    }
}
