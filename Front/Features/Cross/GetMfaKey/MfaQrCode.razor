@namespace Syki.Front.Features.Cross.GetMfaKey

<MudPaper>
    <MudCard Class="px-4 py-0" Elevation="0">
        <MudCardContent>
            <MudStack AlignItems="AlignItems.Center">
                <MudAlert NoIcon="true" Severity="Severity.Info" Variant="Variant.Text">
                    <MudStack Row="true" Justify="Justify.SpaceAround">
                        <MudText>Utilize o app Google Authenticator para ler o QR-Code</MudText>
                    </MudStack>
                </MudAlert>
                @if (_qrCodeLoading)
                {
                    <MudContainer MaxWidth="MaxWidth.False" Style="max-width: 380px" Class="px-0 d-flex align-center justify-center rounded-lg border-dashed border-1 mud-border-secundary">
                        <MudProgressCircular Class="py-10" Style="width: 50%; height: 50%" Color="Color.Dark" Indeterminate="true" Size="Size.Large" />
                    </MudContainer>
                }
                else
                {
                    <MudContainer MaxWidth="MaxWidth.False" Style="max-width: 380px" Class="px-0">
                        <MudImage Src="@(GetQrCodeImageSrc())" Fluid="true" Elevation="25" Class="rounded-lg"/>
                    </MudContainer>
                    <MudContainer MaxWidth="MaxWidth.False" Style="max-width: 380px" Class="px-0">
                        <SykiTextField Value="@_key" CopyAdornment="true" ReadOnly="true" />
                    </MudContainer>
                }
            </MudStack>
        </MudCardContent>
    </MudCard>
</MudPaper>

@inject GetMfaKeyClient Client

@code
{
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private string _key;
    private bool _qrCodeLoading;
    private Byte[] _codeBytes;

    protected override async Task OnInitializedAsync()
    {
        _qrCodeLoading = true;

        var result = await Client.Get();
        var email = await GetUserEmail();
        _key = result.Key;
        _codeBytes = _key.GenerateQrCodeBytes(email);

        _qrCodeLoading = false;
    }

    private async Task<string> GetUserEmail()
    {
        var state = await AuthState;

        var claim = state.User.FindFirst("email");
        if (claim != null)
        {
            return claim.Value;
        }

        return "";
    }

    private string GetQrCodeImageSrc()
    {
        if (_codeBytes == null) return "";
        return string.Format("data:image/png;base64,{0}", Convert.ToBase64String(_codeBytes));
    }
}
