#cloud-config
package_update: true
package_upgrade: true
packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - software-properties-common
  - git
runcmd:
  - exec > >(tee -a /var/log/cloud-init-custom.log) 2>&1
  - echo "===== Início da execução do script de configuração: $(date) ====="
  - echo "Memória disponível: $(free -m | grep Mem | awk '{print $2}')MB"
  - echo "Espaço em disco: $(df -h / | grep / | awk '{print $4}')"
  - echo "Instalando Docker..."
  - curl -fsSL https://get.docker.com -o /tmp/get-docker.sh || { echo "ERRO: Falha ao baixar script Docker"; exit 1; }
  - bash /tmp/get-docker.sh || { echo "ERRO: Falha ao instalar Docker"; exit 1; }
  - systemctl enable docker || echo "AVISO: Falha ao habilitar serviço Docker"
  - systemctl start docker || { echo "ERRO: Falha ao iniciar Docker"; exit 1; }
  - docker --version || { echo "ERRO: Docker não instalado corretamente"; exit 1; }
  - echo "Criando rede Docker 'sykinet'..."
  - docker network create sykinet || echo "AVISO: Rede já pode existir ou houve erro"
  - docker network ls | grep sykinet || { echo "ERRO: Rede sykinet não criada"; exit 1; }
  - echo "Criando volumes Docker..."
  - docker volume create pgdata || echo "AVISO: Volume pgdata já pode existir"
  - docker volume create grafana-data || echo "AVISO: Volume grafana-data já pode existir"
  - docker volume create prometheus-data || echo "AVISO: Volume prometheus-data já pode existir"
  - docker volume ls || { echo "ERRO: Falha ao listar volumes"; exit 1; }
  - |
    echo "Iniciando PostgreSQL..."
    docker run -d \
      --name db \
      --hostname db_host \
      --network sykinet \
      -e POSTGRES_DB=syki-db \
      -e POSTGRES_USER=postgres \
      -e POSTGRES_PASSWORD=${postgres_password} \
      -p 5432:5432 \
      --cpus=1 \
      --memory=1g \
      -v pgdata:/var/lib/postgresql/data \
      --health-cmd="pg_isready -U postgres -d syki-db -h localhost" \
      --health-interval=5s \
      --health-timeout=10s \
      --health-retries=5 \
      --health-start-period=30s \
      --restart unless-stopped \
      postgres:17.4-alpine3.21 \
      postgres -c max_connections=1500 -c max_prepared_transactions=64 -c log_statement=all || { echo "ERRO: Falha ao iniciar PostgreSQL"; exit 1; }
    
    echo "Container do PostgreSQL iniciado. Verificando status..."
    sleep 10
    docker ps | grep db || { echo "ERRO: Container do PostgreSQL não está rodando"; exit 1; }
  - echo "Clonando repositório..."
  - git clone https://github.com/GuttoF/syki-devops.git /opt/syki || { echo "ERRO: Falha ao clonar repositório"; exit 1; }
  - cd /opt/syki || { echo "ERRO: Diretório do projeto não encontrado"; exit 1; }
  - echo "Conteúdo do diretório:"
  - ls -la
  - echo "Verificando Dockerfiles:"
  - ls -la Docker/
  - echo "Construindo imagem backend..."
  - docker build -t syki-back:latest -f Docker/Dockerfile.back . || { echo "ERRO: Falha na construção do backend"; exit 1; }
  - echo "Construindo imagem frontend..."
  - docker build -t syki-front:latest -f Docker/Dockerfile.front . || { echo "ERRO: Falha na construção do frontend"; exit 1; }
  - echo "Construindo imagem daemon..."
  - docker build -t syki-daemon:latest -f Docker/Dockerfile.daemon . || { echo "ERRO: Falha na construção do daemon"; exit 1; }
  - echo "Verificando imagens construídas:"
  - docker images | grep syki
  - |
    echo "Aguardando banco de dados ficar disponível..."
    timeout=180
    counter=0
    until docker exec db pg_isready -U postgres -h localhost || [ $counter -eq $timeout ]; do
      echo "Aguardando conexão com o banco de dados... ($counter/$timeout)"
      sleep 5
      counter=$((counter+5))
    done
    
    if [ $counter -eq $timeout ]; then
      echo "ERRO: Timeout aguardando banco de dados"
      docker logs db
      exit 1
    fi
    
    echo "Banco de dados está disponível!"
  - |
    echo "Iniciando backend..."
    docker run -d \
      --name back \
      --network sykinet \
      -e ASPNETCORE_ENVIRONMENT=Development \
      -e "Database__ConnectionString=UserID=postgres;Password=${postgres_password};Host=db_host;Port=5432;Database=syki-db;Pooling=true;" \
      -p 5001:8080 \
      --cpus=0.5 \
      --memory=512m \
      --health-cmd="curl -f http://localhost:8080/health || exit 1" \
      --health-interval=30s \
      --health-timeout=5s \
      --restart unless-stopped \
      syki-back:latest || { echo "ERRO: Falha ao iniciar backend"; docker logs back; exit 1; }
    
    echo "Backend iniciado. Verificando status..."
    sleep 10
    docker ps | grep back || { echo "ERRO: Container do backend não está rodando"; exit 1; }
  - |
    echo "Iniciando frontend..."
    docker run -d \
      --name front \
      --network sykinet \
      -p 5002:80 \
      --cpus=0.3 \
      --memory=256m \
      --restart unless-stopped \
      syki-front:latest || { echo "ERRO: Falha ao iniciar frontend"; exit 1; }
    
    echo "Frontend iniciado. Verificando status..."
    sleep 10
    docker ps | grep front || { echo "ERRO: Container do frontend não está rodando"; exit 1; }
  - |
    echo "Iniciando daemon..."
    docker run -d \
      --name daemon \
      --network sykinet \
      -e ASPNETCORE_ENVIRONMENT=Development \
      -e "Database__ConnectionString=UserID=postgres;Password=${postgres_password};Host=db_host;Port=5432;Database=syki-db;Pooling=true;Keepalive=60;" \
      -p 5003:8080 \
      --cpus=0.5 \
      --memory=512m \
      --restart unless-stopped \
      syki-daemon:latest || { echo "ERRO: Falha ao iniciar daemon"; exit 1; }
    
    echo "Daemon iniciado. Verificando status..."
    sleep 10
    docker ps | grep daemon || { echo "ERRO: Container do daemon não está rodando"; exit 1; }
  - |
    echo "Configurando Prometheus..."
    mkdir -p /opt/prometheus
    cat > /opt/prometheus/prometheus.yml << EOF
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: 'back'
        static_configs:
          - targets: ['back:8080']
      - job_name: 'daemon'
        static_configs:
          - targets: ['daemon:8080']
    EOF
  - |
    echo "Iniciando Prometheus..."
    docker run -d \
      --name prometheus \
      --network sykinet \
      -v prometheus-data:/prometheus \
      -v /opt/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml \
      -p 9090:9090 \
      --restart unless-stopped \
      prom/prometheus:v2.45.0 || { echo "ERRO: Falha ao iniciar Prometheus"; exit 1; }
    
    echo "Prometheus iniciado. Verificando status..."
    sleep 10
    docker ps | grep prometheus || { echo "ERRO: Container do Prometheus não está rodando"; exit 1; }
  - |
    echo "Iniciando Grafana..."
    docker run -d \
      --name grafana \
      --network sykinet \
      -p 3000:3000 \
      -e "GF_SECURITY_ADMIN_PASSWORD=${grafana_admin_password}" \
      -v grafana-data:/var/lib/grafana \
      --restart unless-stopped \
      grafana/grafana:10.0.3 || { echo "ERRO: Falha ao iniciar Grafana"; exit 1; }
    
    echo "Grafana iniciado. Verificando status..."
    sleep 10
    docker ps | grep grafana || { echo "ERRO: Container do Grafana não está rodando"; exit 1; }
  - echo "Verificando status de todos os contêineres:"
  - docker ps -a
  - echo "===== Deployment concluído com sucesso em $(date) ====="
  - |
    echo "URLs dos serviços:"
    echo "Frontend: http://$(hostname -I | awk '{print $1}'):5002"
    echo "Backend: http://$(hostname -I | awk '{print $1}'):5001"
    echo "Daemon: http://$(hostname -I | awk '{print $1}'):5003"
    echo "Grafana: http://$(hostname -I | awk '{print $1}'):3000"
    echo "Database: $(hostname -I | awk '{print $1}'):5432"
