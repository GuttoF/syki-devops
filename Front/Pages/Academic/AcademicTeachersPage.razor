@using Syki.Front.Components.Custom
@using Syki.Front.Features.Academic.CreateTeacher

@namespace Syki.Front.Pages.Academic

@page "/academic/teachers"
@attribute [Authorize(Roles = "Academic")]

<PageTitle>Professores</PageTitle>

<MudContainer>
    <SykiPageHeader Icon="@Icons.Material.Filled.Person4" Title="Professores" ButtonText="Novo Professor" OnClick="@OpenDialog"/>
    <SykiPageAlert Text="Um professor pode lecionar várias disciplinas ao longo de um período, inclusive em mais de um campus." />
    <MudContainer Class="mb-8">
        <MudDataGrid Class="pa-4" Items="@_teachers" QuickFilter="@_quickFilter" Hover="true" Loading="@_loading" Dense="true" RowsPerPage="10">
            <ToolBarContent>
                <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque pelo name" />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Name" />
                <PropertyColumn Property="x => x.Email" Title="Email" />
            </Columns>
            <NoRecordsContent>
                @(GetNotFoundMessage())
            </NoRecordsContent>
            <PagerContent>
                <SykiDataGridPager T="TeacherOut" />
            </PagerContent>
        </MudDataGrid>
    </MudContainer>
</MudContainer>

@inject IDialogService DialogService
@inject GetTeachersClient GetTeachersClient

@code
{
    private bool _loading;
    private string _searchString;
    private List<TeacherOut> _teachers = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _teachers = await GetTeachersClient.Get();
        _loading = false;
    }

    private Func<TeacherOut, bool> _quickFilter => x => _searchString.IsIn(x.Name);

    private async Task OpenDialog()
    {
        var options = new DialogOptions {
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };
        var dialog = await DialogService.ShowAsync<CreateTeacherDialog>("", options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        
        await OnInitializedAsync();
    }

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem professores cadastrados ainda." : "Nenhum professor encontrado.";
    }
}
