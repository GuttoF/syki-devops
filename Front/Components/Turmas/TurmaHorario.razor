<MudStack Row="true" Class="mb-2">
    <MudItem xs="4">
        <MudSelect
            Dense="true"
            Margin="Margin.Dense"
            Class="py-0 my-0"
            Variant="Variant.Outlined"
            T="Dia?"
            Value="_dia"
            ValueChanged="x => HandleDiaChanged(x)"
            Label="Dia"
            Required="true"
            RequiredError="Informe!"
            AdornmentColor="Color.Primary"
        >
            @foreach (Dia? dia in Enum.GetValues<Dia>())
            {
                <MudSelectItem Value="@dia">@dia.GetDescription()</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="4">
        <MudSelect
            Dense="true"
            Margin="Margin.Dense"
            Class="py-0 my-0"
            Variant="Variant.Outlined"
            T="Hora?"
            Value="_start"
            ValueChanged="x => HandleStartChanged(x)"
            Label="InÃ­cio"
            Required="true"
            RequiredError="Informe!"
            AdornmentColor="Color.Primary"
        >
            @foreach (Hora? hora in Enum.GetValues<Hora>())
            {
                <MudSelectItem Value="@hora">@hora.GetDescription()</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="4">
        <MudSelect
            Dense="true"
            Margin="Margin.Dense"
            Class="py-0 my-0"
            Variant="Variant.Outlined"
            T="Hora?"
            Value="_end"
            ValueChanged="x => HandleEndChanged(x)"
            Label="Fim"
            Required="true"
            RequiredError="Informe!"
            AdornmentColor="Color.Primary"
        >
            @foreach (Hora? hora in Enum.GetValues<Hora>())
            {
                if (_start == null || hora <= _start) continue;
                <MudSelectItem Value="@hora">@hora.GetDescription()</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
</MudStack>

@code
{
    [CascadingParameter(Name = "Horarios")]
    public List<HorarioIn> Horarios { get; set; }

    Dia? _dia;
    Hora? _start;
    Hora? _end;
    HorarioIn _horario = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(0);
        Horarios.Add(_horario);
    }

    void HandleDiaChanged(Dia? newValue)
    {
        _dia = newValue;
        _horario.Dia = _dia!.Value;
    }
    void HandleStartChanged(Hora? newValue)
    {
        _start = newValue;
        _horario.Start = _start!.Value;
    }
    void HandleEndChanged(Hora? newValue)
    {
        _end = newValue;
        _horario.End = _end!.Value;
    }
}
