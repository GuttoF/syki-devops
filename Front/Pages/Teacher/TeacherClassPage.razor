@using Syki.Front.Components.Custom
@using Syki.Front.Components.Buttons
@using Syki.Front.Features.Teacher.AddExamGradeNote
@using Syki.Front.Features.Teacher.CreateLessonAttendance

@namespace Syki.Front.Pages.Teacher

@page "/teacher/classes/{id:guid}"
@attribute [Authorize(Roles = "Teacher")]

<PageTitle>Turma</PageTitle>

<MudContainer>
    <MudCard Class="mt-8 mb-4 mx-6 px-2">
        <MudCardContent>
            <MudStack Row="true" AlignItems="AlignItems.Center">
                <MudIcon Icon="@Icons.Material.Filled.CenterFocusStrong" Class="mr-1 mb-1" Size="Size.Large"/>
                <MudText Typo="Typo.h5" Style="font-weight: bold">@($"{_class.Discipline} - {_class.Period}")</MudText>
                <MudSpacer />
                <MudTabs Elevation="0" Rounded="true" Outlined="true" @bind-ActivePanelIndex="@_index" MinimumTabWidth="120px">
                    <MudTabPanel Text="Frequência" ID='"panel_0"'></MudTabPanel>
                    <MudTabPanel Text="Diário" ID='"panel_1"'></MudTabPanel>
                    <MudTabPanel Text="Notas" ID='"panel_2"'></MudTabPanel>
                </MudTabs>
            </MudStack>
        </MudCardContent>
    </MudCard>

    @if (_index == 0)
    {
        <MudContainer Class="mb-8">
            <MudCard Class="mb-4 px-2">
                <MudCardContent Class="py-1">
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.Class" Class="mr-1 mb-1" Size="Size.Medium"/>
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                            <MudText Typo="Typo.h6">Aula @_lesson.Number</MudText>
                            <MudText Typo="Typo.h3">·</MudText>
                            <MudText Typo="Typo.h6">@_lesson.Date.FormatBr()</MudText>
                            <MudText Typo="Typo.h3">·</MudText>
                            <MudText Typo="Typo.h6">@_lesson.Schedule</MudText>
                        </MudStack>
                        <MudSpacer />
                        <MudButton
                            StartIcon="@Icons.Material.Outlined.Edit"
                            IconSize="Size.Large"
                            Variant="Variant.Filled"
                            Style="height: 40px;"
                            Color="Color.Primary"
                            @onclick="@OnEditLessonClick"
                        >
                            Editar
                        </MudButton>
                    </MudStack>
                </MudCardContent>
            </MudCard>
            <MudDataGrid T="TeacherClassStudentOut" Class="pa-4" Items="@_students" QuickFilter="@_quickFilter" Hover="true" Loading="@_loading" Dense="true" RowsPerPage="10">
                <ToolBarContent>
                    <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por nome" />
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.Name" Title="Nome" />
                    <TemplateColumn Title="Presente" CellClass="pl-11 mx-0">
                        <CellTemplate>
                            <MudCheckBox
                                T="bool"
                                Dense="true"
                                Size="Size.Small"
                                Color="Color.Success"
                                Value="@context.Item.IsSelected"
                                ValueChanged="x => { context.Item.IsSelected = x; }"
                            />
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <NoRecordsContent>
                    @(GetNotFoundMessage())
                </NoRecordsContent>
                <PagerContent>
                    <MudStack Row="true" Class="mt-4">
                        <MudAlert Class="ml-2" Dense="true" Severity="Severity.Warning" Variant="Variant.Text" Elevation="1">
                            <MudText>Alterações pendentes</MudText>
                        </MudAlert>
                        <MudSpacer />
                        <DialogSaveButton Class="mr-2" OnClick="@SaveFrequency"/>
                    </MudStack>
                </PagerContent>
            </MudDataGrid>
        </MudContainer>
    }
    else if (_index == 1)
    {
        <MudContainer Class="mb-8">
            <MudStack Row="true" Class="mt-4" Justify="Justify.Center">
                <MudText Typo="Typo.h1">Diário</MudText>
            </MudStack>
        </MudContainer>
    }
    else
    {
        <MudContainer Class="mb-8">
            <MudDataGrid T="TeacherClassStudentOut" Class="pa-4" Items="@_students" QuickFilter="@_quickFilter" Hover="true" Loading="@_loading" Dense="true" RowsPerPage="10">
                <ToolBarContent>
                    <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por nome" />
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.Name" Title="Nome" />
                    <PropertyColumn Property="x => x.GetNote(ExamType.N1)" Title="N1" />
                    <PropertyColumn Property="x => x.GetNote(ExamType.N2)" Title="N2" />
                    <PropertyColumn Property="x => x.GetNote(ExamType.N3)" Title="N3" />
                    <PropertyColumn Property="x => x.AverageNote.Format()" Title="Média" />
                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate>
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.StickyNote2" OnClick="@(() => AddNote(context.Item))" />
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <NoRecordsContent>
                    @(GetNotFoundMessage())
                </NoRecordsContent>
                <PagerContent>
                    <SykiDataGridPager T="TeacherClassStudentOut" />
                </PagerContent>
            </MudDataGrid>
        </MudContainer>
    }
</MudContainer>

<ClassLessonsDialog @ref="@_dialog" OnRowClick="@SetLesson" />
<AddExamGradeNoteDrawer @ref="@_drawer" AfterSubmit="@Load" />

@inject ISnackbar Snackbar
@inject GetTeacherClassClient GetTeacherClassClient
@inject CreateLessonAttendanceClient CreateLessonAttendanceClient

@code
{
	[Parameter]
	public Guid Id { get; set; }

    private ClassLessonsDialog _dialog;
    private AddExamGradeNoteDrawer _drawer;

    private int _index;
    private bool _loading;
    private string _searchString;
    private TeacherClassOut _class = new();
    private LessonOut _lesson = new();
    private List<TeacherClassStudentOut> _students = [];

    protected override async Task OnInitializedAsync()
    {
        await Load();
        var id = _class.Lessons.Where(x => x.Date <= DateTime.Now.ToDateOnly()).MaxBy(x => x.Date)?.Id ?? Guid.Empty;
        SetLesson(id);
    }

    private async Task Load()
    {
        _loading = true;
        _class = await GetTeacherClassClient.Get(Id);
        _students = _class.Students.OrderBy(x => x.Name).ToList();
        _loading = false;
    }

    private void SetLesson(Guid id)
    {
        _lesson = _class.Lessons.FirstOrDefault(x => x.Id == id) ?? new();
    }

    private void OnEditLessonClick()
    {
        _dialog.Open(_class.Lessons);
    }

    private void CancelFrequency()
    {

    }

    private async Task SaveFrequency()
    {
        var ids = _students.Where(x => x.IsSelected).Select(x => x.Id).ToList();
        var result = await CreateLessonAttendanceClient.Create(_lesson.Id, ids);
        if (result.IsSuccess())
        {
            Snackbar.Add("Chamada salva com sucesso!", Severity.Success);
        }
        else
        {
            Snackbar.Add(result.GetError().Message, Severity.Error);
        }
    }

    private void AddNote(TeacherClassStudentOut item)
    {
        _drawer.Open(item);
    }

    private Func<TeacherClassStudentOut, bool> _quickFilter => x => _searchString.IsIn(x.Name);

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem alunos matriculados ainda." : "Nenhum aluno encontrado.";
    }
}
