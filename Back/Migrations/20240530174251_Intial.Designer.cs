// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Syki.Back.Database;

#nullable disable

namespace Back.Migrations
{
    [DbContext(typeof(SykiDbContext))]
    [Migration("20240530174251_Intial")]
    partial class Intial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("syki")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_role_id");

                    b.ToTable("role_claims", "syki");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("user_claims", "syki");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("user_logins", "syki");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("user_roles", "syki");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("user_tokens", "syki");
                });

            modelBuilder.Entity("Syki.Back.Audit.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<JsonDocument>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entity_type");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid")
                        .HasColumnName("institution_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_audit_logs");

                    b.HasIndex("InstitutionId", "UserId")
                        .HasDatabaseName("ix_audit_logs_institution_id_user_id");

                    b.ToTable("audit_logs", "syki");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateAcademicPeriod.AcademicPeriod", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid")
                        .HasColumnName("institution_id");

                    b.Property<DateOnly>("EndAt")
                        .HasColumnType("date")
                        .HasColumnName("end_at");

                    b.Property<DateOnly>("StartAt")
                        .HasColumnType("date")
                        .HasColumnName("start_at");

                    b.HasKey("Id", "InstitutionId")
                        .HasName("pk_academic_periods");

                    b.HasIndex("InstitutionId")
                        .HasDatabaseName("ix_academic_periods_institution_id");

                    b.ToTable("academic_periods", "syki");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateCampus.Campus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid")
                        .HasColumnName("institution_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_campi");

                    b.HasIndex("InstitutionId")
                        .HasDatabaseName("ix_campi_institution_id");

                    b.ToTable("campi", "syki");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateClass.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uuid")
                        .HasColumnName("discipline_id");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid")
                        .HasColumnName("institution_id");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("period");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id")
                        .HasName("pk_classes");

                    b.HasIndex("DisciplineId")
                        .HasDatabaseName("ix_classes_discipline_id");

                    b.HasIndex("TeacherId")
                        .HasDatabaseName("ix_classes_teacher_id");

                    b.HasIndex("Period", "InstitutionId")
                        .HasDatabaseName("ix_classes_period_institution_id");

                    b.ToTable("classes", "syki");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateClass.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("class_id");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("day");

                    b.Property<string>("EndAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("end_at");

                    b.Property<string>("StartAt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("start_at");

                    b.HasKey("Id")
                        .HasName("pk_schedules");

                    b.HasIndex("ClassId")
                        .HasDatabaseName("ix_schedules_class_id");

                    b.ToTable("schedules", "syki");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateCourse.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid")
                        .HasColumnName("institution_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_courses");

                    b.HasIndex("InstitutionId")
                        .HasDatabaseName("ix_courses_institution_id");

                    b.ToTable("courses", "syki");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateCourseCurriculum.CourseCurriculum", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_id");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid")
                        .HasColumnName("institution_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_course_curriculums");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_course_curriculums_course_id");

                    b.HasIndex("InstitutionId")
                        .HasDatabaseName("ix_course_curriculums_institution_id");

                    b.ToTable("course_curriculums", "syki");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateCourseCurriculum.CourseCurriculumDiscipline", b =>
                {
                    b.Property<Guid>("CourseCurriculumId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_curriculum_id");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uuid")
                        .HasColumnName("discipline_id");

                    b.Property<byte>("Credits")
                        .HasColumnType("smallint")
                        .HasColumnName("credits");

                    b.Property<byte>("Period")
                        .HasColumnType("smallint")
                        .HasColumnName("period");

                    b.Property<int>("Workload")
                        .HasColumnType("integer")
                        .HasColumnName("workload");

                    b.HasKey("CourseCurriculumId", "DisciplineId")
                        .HasName("pk_course_curriculums__disciplines");

                    b.HasIndex("DisciplineId")
                        .HasDatabaseName("ix_course_curriculums__disciplines_discipline_id");

                    b.ToTable("course_curriculums__disciplines", "syki");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateCourseOffering.CourseOffering", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CampusId")
                        .HasColumnType("uuid")
                        .HasColumnName("campus_id");

                    b.Property<Guid>("CourseCurriculumId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_curriculum_id");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_id");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid")
                        .HasColumnName("institution_id");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("period");

                    b.Property<string>("Shift")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("shift");

                    b.HasKey("Id")
                        .HasName("pk_course_offerings");

                    b.HasIndex("CampusId")
                        .HasDatabaseName("ix_course_offerings_campus_id");

                    b.HasIndex("CourseCurriculumId")
                        .HasDatabaseName("ix_course_offerings_course_curriculum_id");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_course_offerings_course_id");

                    b.HasIndex("InstitutionId")
                        .HasDatabaseName("ix_course_offerings_institution_id");

                    b.HasIndex("Period", "InstitutionId")
                        .HasDatabaseName("ix_course_offerings_period_institution_id");

                    b.ToTable("course_offerings", "syki");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateDiscipline.CourseDiscipline", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_id");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uuid")
                        .HasColumnName("discipline_id");

                    b.HasKey("CourseId", "DisciplineId")
                        .HasName("pk_courses__disciplines");

                    b.HasIndex("DisciplineId")
                        .HasDatabaseName("ix_courses__disciplines_discipline_id");

                    b.ToTable("courses__disciplines", "syki");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateDiscipline.Discipline", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid")
                        .HasColumnName("institution_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_disciplines");

                    b.HasIndex("InstitutionId")
                        .HasDatabaseName("ix_disciplines_institution_id");

                    b.ToTable("disciplines", "syki");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateEnrollmentPeriod.EnrollmentPeriod", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid")
                        .HasColumnName("institution_id");

                    b.Property<DateOnly>("EndAt")
                        .HasColumnType("date")
                        .HasColumnName("end_at");

                    b.Property<DateOnly>("StartAt")
                        .HasColumnType("date")
                        .HasColumnName("start_at");

                    b.HasKey("Id", "InstitutionId")
                        .HasName("pk_enrollment_periods");

                    b.ToTable("enrollment_periods", "syki");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateExamGrade.ExamGrade", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("class_id");

                    b.Property<string>("ExamType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("exam_type");

                    b.Property<decimal>("Note")
                        .HasColumnType("NUMERIC(4, 2)")
                        .HasColumnName("note");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("pk_exam_grades");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_exam_grades_student_id");

                    b.HasIndex("ClassId", "StudentId", "ExamType")
                        .IsUnique()
                        .HasDatabaseName("ix_exam_grades_class_id_student_id_exam_type");

                    b.ToTable("exam_grades", "syki");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateNotification.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid")
                        .HasColumnName("institution_id");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("target");

                    b.Property<bool>("Timeless")
                        .HasColumnType("boolean")
                        .HasColumnName("timeless");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.HasIndex("InstitutionId")
                        .HasDatabaseName("ix_notifications_institution_id");

                    b.ToTable("notifications", "syki");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateNotification.UserNotification", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("notification_id");

                    b.Property<DateTime?>("ViewedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("viewed_at");

                    b.HasKey("UserId", "NotificationId")
                        .HasName("pk_users__notifications");

                    b.HasIndex("NotificationId")
                        .HasDatabaseName("ix_users__notifications_notification_id");

                    b.ToTable("users__notifications", "syki");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateStudent.SykiStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("class_id");

                    b.Property<Guid>("CourseOfferingId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_offering_id");

                    b.Property<string>("EnrollmentCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("enrollment_code");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid")
                        .HasColumnName("institution_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_students");

                    b.HasIndex("ClassId")
                        .HasDatabaseName("ix_students_class_id");

                    b.HasIndex("CourseOfferingId")
                        .HasDatabaseName("ix_students_course_offering_id");

                    b.HasIndex("InstitutionId", "Id")
                        .IsUnique()
                        .HasDatabaseName("ix_students_institution_id_id");

                    b.ToTable("students", "syki");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateTeacher.SykiTeacher", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid")
                        .HasColumnName("institution_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_teachers");

                    b.HasIndex("InstitutionId", "Id")
                        .IsUnique()
                        .HasDatabaseName("ix_teachers_institution_id_id");

                    b.ToTable("teachers", "syki");
                });

            modelBuilder.Entity("Syki.Back.Features.Cross.CreateInstitution.Institution", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_institutions");

                    b.ToTable("institutions", "syki");
                });

            modelBuilder.Entity("Syki.Back.Features.Cross.CreatePendingUserRegister.UserRegister", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateOnly?>("TrialEnd")
                        .HasColumnType("date")
                        .HasColumnName("trial_end");

                    b.Property<DateOnly?>("TrialStart")
                        .HasColumnType("date")
                        .HasColumnName("trial_start");

                    b.HasKey("Id")
                        .HasName("pk_user_registers");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_user_registers_email");

                    b.ToTable("user_registers", "syki");
                });

            modelBuilder.Entity("Syki.Back.Features.Cross.CreateUser.SykiRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("role_name_index");

                    b.ToTable("roles", "syki");

                    b.HasData(
                        new
                        {
                            Id = new Guid("443ed3b8-28dd-4532-b7db-112d9d8ef236"),
                            ConcurrencyStamp = "320b9863-3956-4fa3-8a8e-e7a319733a38",
                            Name = "Adm",
                            NormalizedName = "ADM"
                        },
                        new
                        {
                            Id = new Guid("42246a32-c43b-4614-be92-d8bb45d416c3"),
                            ConcurrencyStamp = "5f507b17-141b-4110-85e1-d2e9289ae37c",
                            Name = "Academic",
                            NormalizedName = "ACADEMIC"
                        },
                        new
                        {
                            Id = new Guid("5235387f-1a1d-48fc-a2ad-ca4bdeb7cedd"),
                            ConcurrencyStamp = "3f328861-a1c2-4b6a-9dc6-0d85f6ec74c5",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = new Guid("0fbb1801-fcdb-4836-822c-ed59f63de06b"),
                            ConcurrencyStamp = "0dbb3c0e-78bd-4c6e-864a-9a490ab6dc2c",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Syki.Back.Features.Cross.CreateUser.SykiUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid")
                        .HasColumnName("institution_id");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasAlternateKey("InstitutionId", "Id")
                        .HasName("ak_asp_net_users_institution_id_id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("user_name_index");

                    b.ToTable("users", "syki");
                });

            modelBuilder.Entity("Syki.Back.Features.Cross.SendResetPasswordToken.ResetPasswordToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("used_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reset_password_tokens");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("ix_reset_password_tokens_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reset_password_tokens_user_id");

                    b.ToTable("reset_password_tokens", "syki");
                });

            modelBuilder.Entity("Syki.Back.Features.Student.CreateStudentEnrollment.ClassStudent", b =>
                {
                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("class_id");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.Property<string>("StudentDisciplineStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_discipline_status");

                    b.HasKey("ClassId", "StudentId")
                        .HasName("pk_classes__students");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_classes__students_student_id");

                    b.ToTable("classes__students", "syki");
                });

            modelBuilder.Entity("Syki.Back.Tasks.SykiTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("processed_at");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_tasks");

                    b.ToTable("tasks", "syki");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Syki.Back.Features.Cross.CreateUser.SykiRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Syki.Back.Features.Cross.CreateUser.SykiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Syki.Back.Features.Cross.CreateUser.SykiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Syki.Back.Features.Cross.CreateUser.SykiRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_asp_net_roles_role_id");

                    b.HasOne("Syki.Back.Features.Cross.CreateUser.SykiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Syki.Back.Features.Cross.CreateUser.SykiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Syki.Back.Audit.AuditLog", b =>
                {
                    b.HasOne("Syki.Back.Features.Cross.CreateUser.SykiUser", null)
                        .WithMany()
                        .HasForeignKey("InstitutionId", "UserId")
                        .HasPrincipalKey("InstitutionId", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audit_logs_asp_net_users_syki_user_id");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateAcademicPeriod.AcademicPeriod", b =>
                {
                    b.HasOne("Syki.Back.Features.Cross.CreateInstitution.Institution", null)
                        .WithMany("AcademicPeriods")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_periods_institutions_institution_id");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateCampus.Campus", b =>
                {
                    b.HasOne("Syki.Back.Features.Cross.CreateInstitution.Institution", null)
                        .WithMany("Campi")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_campi_institutions_institution_id");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateClass.Class", b =>
                {
                    b.HasOne("Syki.Back.Features.Academic.CreateDiscipline.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_classes_disciplines_discipline_id");

                    b.HasOne("Syki.Back.Features.Academic.CreateTeacher.SykiTeacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_classes_teachers_teacher_id");

                    b.HasOne("Syki.Back.Features.Academic.CreateAcademicPeriod.AcademicPeriod", null)
                        .WithMany()
                        .HasForeignKey("Period", "InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_classes_academic_periods_academic_period_id_academic_period");

                    b.Navigation("Discipline");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateClass.Schedule", b =>
                {
                    b.HasOne("Syki.Back.Features.Academic.CreateClass.Class", null)
                        .WithMany("Schedules")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_schedules_classes_class_id");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateCourse.Course", b =>
                {
                    b.HasOne("Syki.Back.Features.Cross.CreateInstitution.Institution", null)
                        .WithMany("Courses")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_courses_institutions_institution_id");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateCourseCurriculum.CourseCurriculum", b =>
                {
                    b.HasOne("Syki.Back.Features.Academic.CreateCourse.Course", "Course")
                        .WithMany("CourseCurriculums")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_curriculums_courses_course_id");

                    b.HasOne("Syki.Back.Features.Cross.CreateInstitution.Institution", null)
                        .WithMany("CourseCurriculums")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_curriculums_institutions_institution_id");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateCourseCurriculum.CourseCurriculumDiscipline", b =>
                {
                    b.HasOne("Syki.Back.Features.Academic.CreateCourseCurriculum.CourseCurriculum", null)
                        .WithMany("Links")
                        .HasForeignKey("CourseCurriculumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_curriculums__disciplines_course_curriculums_course_c");

                    b.HasOne("Syki.Back.Features.Academic.CreateDiscipline.Discipline", null)
                        .WithMany()
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_curriculums__disciplines_disciplines_discipline_id");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateCourseOffering.CourseOffering", b =>
                {
                    b.HasOne("Syki.Back.Features.Academic.CreateCampus.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_offerings_campi_campus_temp_id");

                    b.HasOne("Syki.Back.Features.Academic.CreateCourseCurriculum.CourseCurriculum", "CourseCurriculum")
                        .WithMany()
                        .HasForeignKey("CourseCurriculumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_offerings_course_curriculums_course_curriculum_id");

                    b.HasOne("Syki.Back.Features.Academic.CreateCourse.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_offerings_courses_course_id");

                    b.HasOne("Syki.Back.Features.Cross.CreateInstitution.Institution", null)
                        .WithMany("CourseOfferings")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_offerings_institutions_institution_id");

                    b.HasOne("Syki.Back.Features.Academic.CreateAcademicPeriod.AcademicPeriod", null)
                        .WithMany()
                        .HasForeignKey("Period", "InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_offerings_academic_periods_academic_period_id_academ");

                    b.Navigation("Campus");

                    b.Navigation("Course");

                    b.Navigation("CourseCurriculum");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateDiscipline.CourseDiscipline", b =>
                {
                    b.HasOne("Syki.Back.Features.Academic.CreateCourse.Course", null)
                        .WithMany("Links")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_courses__disciplines_courses_course_id");

                    b.HasOne("Syki.Back.Features.Academic.CreateDiscipline.Discipline", null)
                        .WithMany("Links")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_courses__disciplines_disciplines_discipline_id");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateDiscipline.Discipline", b =>
                {
                    b.HasOne("Syki.Back.Features.Cross.CreateInstitution.Institution", null)
                        .WithMany("Disciplines")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_disciplines_institutions_institution_id");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateEnrollmentPeriod.EnrollmentPeriod", b =>
                {
                    b.HasOne("Syki.Back.Features.Academic.CreateAcademicPeriod.AcademicPeriod", null)
                        .WithOne()
                        .HasForeignKey("Syki.Back.Features.Academic.CreateEnrollmentPeriod.EnrollmentPeriod", "Id", "InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enrollment_periods_academic_periods_academic_period_id_acad");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateExamGrade.ExamGrade", b =>
                {
                    b.HasOne("Syki.Back.Features.Academic.CreateClass.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_grades_classes_class_id");

                    b.HasOne("Syki.Back.Features.Academic.CreateStudent.SykiStudent", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_grades_students_syki_student_temp_id");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateNotification.Notification", b =>
                {
                    b.HasOne("Syki.Back.Features.Cross.CreateInstitution.Institution", null)
                        .WithMany("Notifications")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notifications_institutions_institution_id");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateNotification.UserNotification", b =>
                {
                    b.HasOne("Syki.Back.Features.Academic.CreateNotification.Notification", "Notification")
                        .WithMany("Users")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users__notifications_notifications_notification_id");

                    b.HasOne("Syki.Back.Features.Cross.CreateUser.SykiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users__notifications_asp_net_users_syki_user_id");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateStudent.SykiStudent", b =>
                {
                    b.HasOne("Syki.Back.Features.Academic.CreateClass.Class", null)
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("fk_students_classes_class_id");

                    b.HasOne("Syki.Back.Features.Academic.CreateCourseOffering.CourseOffering", "CourseOffering")
                        .WithMany()
                        .HasForeignKey("CourseOfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_students_course_offerings_course_offering_id");

                    b.HasOne("Syki.Back.Features.Cross.CreateInstitution.Institution", null)
                        .WithMany("Students")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_students_institutions_institution_id");

                    b.HasOne("Syki.Back.Features.Cross.CreateUser.SykiUser", "User")
                        .WithOne()
                        .HasForeignKey("Syki.Back.Features.Academic.CreateStudent.SykiStudent", "InstitutionId", "Id")
                        .HasPrincipalKey("Syki.Back.Features.Cross.CreateUser.SykiUser", "InstitutionId", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_students_asp_net_users_user_id");

                    b.Navigation("CourseOffering");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateTeacher.SykiTeacher", b =>
                {
                    b.HasOne("Syki.Back.Features.Cross.CreateInstitution.Institution", null)
                        .WithMany("Teachers")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teachers_institutions_institution_id");

                    b.HasOne("Syki.Back.Features.Cross.CreateUser.SykiUser", null)
                        .WithOne()
                        .HasForeignKey("Syki.Back.Features.Academic.CreateTeacher.SykiTeacher", "InstitutionId", "Id")
                        .HasPrincipalKey("Syki.Back.Features.Cross.CreateUser.SykiUser", "InstitutionId", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teachers_asp_net_users_syki_user_id");
                });

            modelBuilder.Entity("Syki.Back.Features.Cross.CreateUser.SykiUser", b =>
                {
                    b.HasOne("Syki.Back.Features.Cross.CreateInstitution.Institution", null)
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_institutions_institution_id");
                });

            modelBuilder.Entity("Syki.Back.Features.Cross.SendResetPasswordToken.ResetPasswordToken", b =>
                {
                    b.HasOne("Syki.Back.Features.Cross.CreateUser.SykiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reset_password_tokens_asp_net_users_syki_user_id");
                });

            modelBuilder.Entity("Syki.Back.Features.Student.CreateStudentEnrollment.ClassStudent", b =>
                {
                    b.HasOne("Syki.Back.Features.Academic.CreateClass.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_classes__students_classes_class_id");

                    b.HasOne("Syki.Back.Features.Academic.CreateStudent.SykiStudent", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_classes__students_students_syki_student_id");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateClass.Class", b =>
                {
                    b.Navigation("Schedules");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateCourse.Course", b =>
                {
                    b.Navigation("CourseCurriculums");

                    b.Navigation("Links");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateCourseCurriculum.CourseCurriculum", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateDiscipline.Discipline", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("Syki.Back.Features.Academic.CreateNotification.Notification", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Syki.Back.Features.Cross.CreateInstitution.Institution", b =>
                {
                    b.Navigation("AcademicPeriods");

                    b.Navigation("Campi");

                    b.Navigation("CourseCurriculums");

                    b.Navigation("CourseOfferings");

                    b.Navigation("Courses");

                    b.Navigation("Disciplines");

                    b.Navigation("Notifications");

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });
#pragma warning restore 612, 618
        }
    }
}
