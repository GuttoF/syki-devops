@namespace Syki.Front.Features.Teacher.CreateLessonAttendance

<MudDialog @bind-Visible="@_visible" Options="@_options">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Class" Class="mr-1 mb-n1" />
            Selecione uma aula
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTable
            T="LessonOut"
            Items="@_lessons"
            Class="mb-4"
            Breakpoint="Breakpoint.Sm"
            Dense="true"
            Hover="true"
            RowClass="cursor-pointer"
            OnRowClick="@HandleRowClick"
            RowsPerPage="100"
        >
            <HeaderContent>
                <MudTh>Aula</MudTh>
                <MudTh>Data</MudTh>
                <MudTh>Horário</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Frequência</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Aula">@context.Number</MudTd>
                <MudTd DataLabel="Data">@context.Date</MudTd>
                <MudTd DataLabel="Horário">@context.Schedule</MudTd>
                <MudTd DataLabel="Status">@context.Status.GetDescription()</MudTd>
                <MudTd DataLabel="Frequência">
                    @if (context.Status == LessonStatus.Finalized)
                    {
                        <MudProgressLinear Color="Color.Primary" Rounded="true" Size="Size.Large" Value="@decimal.ToDouble(context.Frequency)" Style="height: 24px">
                            <MudText Typo="Typo.body1">
                                <b>@context.Frequency.Format()%</b>
                            </MudText>
                        </MudProgressLinear>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    </DialogContent>
</MudDialog>

@inject IBrowserViewportService BrowserViewportService

@code
{
    [Parameter]
    public EventCallback<Guid> OnRowClick { get; set; }

    private bool _visible;
    private List<LessonOut> _lessons = [];

    private readonly DialogOptions _options = new()
    {
        FullWidth = true,
        CloseButton = true,
        MaxWidth = MaxWidth.Medium,
    };

    public async Task Open(List<LessonOut> lessons)
    {
        var breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
        _options.FullScreen = breakpoint == Breakpoint.Xs;
        _lessons = lessons.Where(x => x.Date <= DateTime.Now.ToDateOnly()).ToList();
        _visible = true;
    }

    private void Close()
    {
        _visible = false;
    }

    private async Task HandleRowClick(TableRowClickEventArgs<LessonOut> row)
    {
        Close();
        await OnRowClick.InvokeAsync(row.Item.Id);
    }
}
