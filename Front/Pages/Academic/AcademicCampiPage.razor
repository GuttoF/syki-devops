@using Syki.Front.Components.Custom
@using Syki.Front.Features.Academic.GetCampi
@using Syki.Front.Features.Academic.CreateCampus
@using Syki.Front.Features.Academic.UpdateCampus

@namespace Syki.Front.Pages.Academic

@page "/academic/campi"
@attribute [Authorize(Roles = "Academic")]

<PageTitle>Campi</PageTitle>

<MudContainer>
    <SykiPageHeader Icon="@Icons.Material.Filled.GroupWork" Title="Campi" ButtonText="Novo Campus" OnClick="@OpenDialog"/>
    <SykiPageAlert Text="Sua instituição pode ser formada por vários campus." />
    <MudContainer Class="mb-8">
        <MudDataGrid
            T="CampusOut"
            Class="pa-4"
            Items="@_campi"
            QuickFilter="@_quickFilter"
            Dense="true"
            Hover="true"
            ReadOnly="true"
            Loading="@_loading"
            RowsPerPage="10"
        >
            <ToolBarContent>
                <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por nome ou cidade" />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Nome" />
                <PropertyColumn Property="x => x.City" Title="Cidade" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => OpenEditDialog(context.Item))" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <NoRecordsContent>
                @(GetNotFoundMessage())
            </NoRecordsContent>
            <PagerContent>
                <SykiDataGridPager T="@CampusOut" />
            </PagerContent>
        </MudDataGrid>
    </MudContainer>
</MudContainer>

@inject GetCampiClient Client
@inject IDialogService DialogService

@code
{
    private bool _loading;
    private string _searchString;
    private List<CampusOut> _campi = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _campi = await Client.Get();
        _loading = false;
    }

    private Func<CampusOut, bool> _quickFilter => x => _searchString.IsIn(x.Name, x.City);

    private async Task OpenDialog()
    {
        var options = new DialogOptions {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
        };
        var dialog = await DialogService.ShowAsync<CreateCampusDialog>("", options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        
        await OnInitializedAsync();
    }

    private async Task OpenEditDialog(CampusOut item)
    {
        var parameters = new DialogParameters<UpdateCampusDialog>();
        parameters.Add(x => x.Campus, item);

        var options = new DialogOptions {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
        };
        var dialog = await DialogService.ShowAsync<UpdateCampusDialog>("", parameters, options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        
        await OnInitializedAsync();
    }

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem campus cadastrados ainda." : "Nenhum campus encontrado.";
    }
}
