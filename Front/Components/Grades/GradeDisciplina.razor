<MudForm @ref="form">
    <MudStack Row="true">
        <MudItem xs="6">
            <MudAutocomplete
                MaxItems="50"
                T="GradeDisciplinaFillable"
                SearchFunc="@SearchDisciplina"
                Dense="true"
                Margin="Margin.Dense"
                Variant="Variant.Outlined"
                ShowProgressIndicator="true"
                Class="mb-2"
                Value="@Data"
                ValueChanged="(GradeDisciplinaFillable newValue) => HandleDisciplinaChanged(newValue)"
                Label="Disciplina"
                Required="true"
                RequiredError="Informe!"
                AdornmentColor="Color.Primary"
            />
        </MudItem>
        <MudItem xs="2">
            <MudSelect
                Dense="true"
                Margin="Margin.Dense"
                Variant="Variant.Outlined"
                T="byte?"
                Value="@Data.Periodo"
                ValueChanged="x => HandlePeriodoChanged(x)"
                Label="Período"
                Required="true"
                RequiredError="Informe!"
                AdornmentColor="Color.Primary"
            >
                @foreach (byte? item in Enumerable.Range(1, 10).ToList())
                {
                    <MudSelectItem Value="@item">@($"{item}º")</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="2">
            <MudNumericField
                MaxLength="2"
                HideSpinButtons="true"
                Margin="Margin.Dense"
                Variant="Variant.Outlined"
                T="byte?"
                Value="@Data.Creditos"
                ValueChanged="x => HandleCreditosChanged(x)"
                Label="Créditos"
                Required="true"
                RequiredError="Informe!"
            />
        </MudItem>
        <MudItem xs="2">
            <MudNumericField
                MaxLength="3"
                HideSpinButtons="true"
                Margin="Margin.Dense"
                Variant="Variant.Outlined"
                T="ushort?"
                Value="@Data.CargaHoraria"
                ValueChanged="x => HandleCargaHorariaChanged(x)"
                Label="Carga Horária"
                Required="true"
                RequiredError="Informe!"
            />
        </MudItem>
    </MudStack>
</MudForm>

@code
{
    MudForm form;

    [CascadingParameter(Name = "Options")]
    public List<CursoDisciplinaOut> Options { get; set; }

    [CascadingParameter(Name = "Disciplinas")]
    public List<GradeDisciplinaFillable> Disciplinas { get; set; }

    GradeDisciplinaFillable Data = new();

    private async Task<IEnumerable<GradeDisciplinaFillable>> SearchDisciplina(string value)
    {
        await Task.Delay(0);

        var filtered = Options.Where(d => !d.IsSelected || (d.IsSelected && d.Id == Data.Id))
            .ToList().ConvertAll(x => new GradeDisciplinaFillable { Id = x.Id, Nome = x.Nome });

        if (string.IsNullOrEmpty(value))
            return filtered;

        return filtered.Where(x => x.Nome.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    void HandleDisciplinaChanged(GradeDisciplinaFillable newValue)
    {
        if (Data.Id == Guid.Empty)
        {
            Options.First(d => d.Id == newValue.Id).IsSelected = true;
            Disciplinas.First(d => d.Id == Data.Id).Nome = newValue.Nome;
            Disciplinas.First(d => d.Id == Data.Id).Id = newValue.Id;
            Data = newValue;
            return;
        }

        Options.First(d => d.Id == Data.Id).IsSelected = false;
        Disciplinas.First(d => d.Id == Data.Id).Nome = newValue.Nome;
        Disciplinas.First(d => d.Id == Data.Id).Id = newValue.Id;
        Data = newValue;
    }

    void HandlePeriodoChanged(byte? newValue)
    {
        Data.Periodo = newValue;

        if (Data.Id == Guid.Empty) return;

        Disciplinas.First(d => d.Id == Data.Id).Periodo = newValue;
    }

    void HandleCreditosChanged(byte? newValue)
    {
        Data.Creditos = newValue;

        if (Data.Id == Guid.Empty) return;

        Disciplinas.First(d => d.Id == Data.Id).Creditos = newValue;
    }

    void HandleCargaHorariaChanged(ushort? newValue)
    {
        Data.CargaHoraria = newValue;

        if (Data.Id == Guid.Empty) return;

        Disciplinas.First(d => d.Id == Data.Id).CargaHoraria = newValue;
    }
}
