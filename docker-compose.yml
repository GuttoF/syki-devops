services:
  db:
    image: 'postgres:17.4-alpine3.21'
    container_name: db
    hostname: db_host
    restart: unless-stopped
    environment:
      POSTGRES_DB: syki-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5432:5432'
    networks:
      - sykinet
    volumes:
      - pgdata:/var/lib/postgresql/data
    command: ["postgres","-c","max_connections=1500","-c","max_prepared_transactions=64","-c","log_statement=all"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d syki-db -h localhost"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  back:
    container_name: back
    build:
      context: .
      dockerfile: Docker/Dockerfile.back
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      Database__ConnectionString: UserID=postgres;Password=postgres;Host=db_host;Port=5432;Database=syki-db;Pooling=true;
    ports:
      - '5001:8080'
    networks:
      - sykinet
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  front:
    container_name: front
    build:
      context: .
      dockerfile: Docker/Dockerfile.front
    restart: unless-stopped
    depends_on:
      - back
    ports:
      - '5002:80'
    networks:
      - sykinet
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

  daemon:
    container_name: daemon
    build:
      context: .
      dockerfile: Docker/Dockerfile.daemon
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      Database__ConnectionString: UserID=postgres;Password=postgres;Host=db_host;Port=5432;Database=syki-db;Pooling=true;Keepalive=60;
    ports:
      - '5003:8080'
    networks:
      - sykinet
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  prometheus:
    image: prom/prometheus:v2.50.1
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - '9090:9090'
    networks:
      - sykinet
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  loki:
    image: grafana/loki:2.9.5
    container_name: loki
    restart: unless-stopped
    ports:
      - '3100:3100'
    volumes:
      - ./loki:/etc/loki
      - loki_data:/loki
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - sykinet
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  promtail:
    image: grafana/promtail:2.9.5
    container_name: promtail
    restart: unless-stopped
    volumes:
      - ./promtail:/etc/promtail
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - sykinet
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

  grafana:
    image: grafana/grafana:10.3.3
    container_name: grafana
    restart: unless-stopped
    ports:
      - '3000:3000'
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - sykinet
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

networks:
  sykinet:
    driver: bridge

volumes:
  pgdata:
  prometheus_data:
  loki_data:
  grafana_data: