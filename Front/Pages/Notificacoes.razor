@page "/notificacoes"

<PageTitle>Notificações</PageTitle>

<MudContainer>
    <SykiPageHeader Icon="@Icons.Material.Filled.Notifications" Title="Notificações" ButtonText="Nova Notificação" OnClick="OpenDialog" />

    <MudAlert Class="mt-4 mb-4 mx-6 pl-6" Severity="Severity.Normal" Variant="Variant.Text" Elevation="1">
        <MudText>Aqui você pode escolher quais usuários serão notificados e acompanhar o status de visualização das mensagens.</MudText>
    </MudAlert>

    <MudContainer Class="mb-8">
        <MudDataGrid
            T="NotificationOut"
            Class="pa-4"
            Items="@_notifications"
            QuickFilter="@_quickFilter"
            Dense="true"
            Hover="true"
            ReadOnly="true"
            Loading="_loading"
            RowsPerPage="10"
        >
            <ToolBarContent>
                <MudSpacer />
                <MudSpacer />
                <MudTextField
                    Margin="Margin.Dense"
                    Variant="Variant.Outlined"
                    @bind-Value="_searchString"
                    Placeholder="Busque por título ou descrição"
                    Adornment="Adornment.Start"
                    Immediate="true"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    IconSize="Size.Medium"
                    Class="mt-0"
                />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Title" Title="Título" />
                <PropertyColumn Property="x => x.Description" Title="Descrição" />
                <PropertyColumn Property="x => x.CreatedAt" Title="Criada em" />
                <PropertyColumn Property="x => x.Views" Title="Visualizações" />
            </Columns>
 
            <NoRecordsContent>
                @(GetNotFoundMessage())
            </NoRecordsContent>

            <PagerContent>
                <MudDataGridPager T="NotificationOut" RowsPerPageString="Linhas por página:" InfoFormat="{first_item}-{last_item} de {all_items}" />
            </PagerContent>
        </MudDataGrid>
    </MudContainer>
</MudContainer>

@inject HttpClient Http
@inject IDialogService DialogService

@code
{
    private bool _loading;
    private string _searchString;
    private List<NotificationOut> _notifications = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _notifications = await Http.GetFromJsonAsync<List<NotificationOut>>("/notifications") ?? [];
        _loading = false;
    }

    private async Task OpenDialog()
    {
        var options = new DialogOptions {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
        };
        var dialog = await DialogService.ShowAsync<NewNotificationDialog>("", options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        
        await OnInitializedAsync();
    }

    private Func<NotificationOut, bool> _quickFilter => x => _searchString.IsIn(x.Title, x.Description);

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem notificações cadastradas ainda." : "Nenhuma notificação encontrada.";
    }
}
