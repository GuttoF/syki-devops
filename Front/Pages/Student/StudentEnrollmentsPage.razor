@using Syki.Front.Components.Agenda
@using Syki.Front.Components.Custom
@using Syki.Front.Components.Buttons
@using Syki.Front.Features.Academic.CreateEnrollmentPeriod

@namespace Syki.Front.Pages.Student

@page "/student/enrollments"
@attribute [Authorize(Roles = "Student")]

<PageTitle>Matrícula</PageTitle>

<MudContainer>
    <MudCard Class="mt-8 mb-4 mx-6 px-2">
        <MudCardContent>
            <MudStack Row="true" AlignItems="AlignItems.Center">
                <MudIcon Icon="@Icons.Material.Filled.Article" Class="mr-1 mb-1" Size="Size.Large" />
                <MudText Typo="Typo.h5" Style="font-weight: bold">Matrícula</MudText>
                <MudSpacer />
            </MudStack>
        </MudCardContent>
    </MudCard>

    @if (_enrollmentPeriod == null)
    {
    }
    else if (_enrollmentPeriod.Id.IsEmpty())
    {
        <SykiPageAlert Text="Período de matrícula encerrado!" />
    }
    else if (_finished)
    {
        <MudAlert Class="mt-4 mb-4 mx-6 pl-6" Severity="Severity.Success" Variant="Variant.Text" Elevation="1">
            <MudText>Matrícula realizada com sucesso!</MudText>
        </MudAlert>
    }
    else
    {
        <MudAlert Class="mt-4 mb-4 mx-6 pl-6" Severity="Severity.Normal" Variant="Variant.Text" Elevation="1">
            <MudText>Selecione as disciplinas que você irá cursar nesse semestre. O período de matrícula vai até
                <strong>@_enrollmentPeriod.End.ToString("dd/MM/yyyy")</strong>. </MudText>
        </MudAlert>

        <CascadingValue Name="Dias" Value="@_days">
            <WeeklyAgenda />
        </CascadingValue>

        <MudContainer Class="mb-8">
            <MudTable
                T="EnrollmentClassOut"
                Items="@_options"
                Class="pa-4"
                Breakpoint="Breakpoint.Sm"
                Dense="true"
                Hover="true"
                Loading="@_loading"
                RowsPerPage="100"
            >
                <HeaderContent>
                    <MudTh>Disciplina</MudTh>
                    <MudTh>Período</MudTh>
                    <MudTh>Créditos</MudTh>
                    <MudTh>CH</MudTh>
                    <MudTh>Professor</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Disciplina">@context.Discipline</MudTd>
                    <MudTd DataLabel="Período">@context.Period</MudTd>
                    <MudTd DataLabel="Créditos">@context.Credits</MudTd>
                    <MudTd DataLabel="CH">@context.Workload</MudTd>
                    <MudTd DataLabel="Professor">@context.Teacher</MudTd>
                    <MudTd>
                        <MudCheckBox
                            T="bool"
                            Dense="true"
                            Size="Size.Small"
                            Color="Color.Success"
                            Checked="@context.IsSelected"
                            CheckedChanged="x => { context.IsSelected = x; HandleCheckedChanged(); }"
                        />
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    Não existem turmas disponíveis no momento.
                </NoRecordsContent>
                <PagerContent>
                    <MudDivider />
                    <MudStack Row="true" Class="mt-2">
                        <SykiProgressCircular Loading="@_loading" />
                        <DialogSaveButton OnClick="@Submit" />
                    </MudStack>
                </PagerContent>
            </MudTable>
        </MudContainer>
    }
</MudContainer>

@inject ISnackbar Snackbar
@inject CreateStudentEnrollmentClient CreateStudentEnrollmentClient
@inject GetCurrentEnrollmentPeriodClient GetCurrentEnrollmentPeriodClient
@inject GetStudentEnrollmentClassesClient GetStudentEnrollmentClassesClient

@code
{
    private bool _loading;
    private bool _finished;
    EnrollmentPeriodOut _enrollmentPeriod;
    private List<EnrollmentClassOut> _options = [];
    private List<AgendaDayOut> _days = [];

    void HandleCheckedChanged()
    {
        _days = _options.Where(o => o.IsSelected).ToList().ToAgendas();
    }

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _enrollmentPeriod = await GetCurrentEnrollmentPeriodClient.Get();
        if (_enrollmentPeriod.Id.IsEmpty())
        {
            _loading = false;
            return;
        }
        _options = await GetStudentEnrollmentClassesClient.Get();
        HandleCheckedChanged();
        _loading = false;
    }

    async Task Submit()
    {
        if (_loading) return;

        _loading = true;
        var classes = _options.Where(o => o.IsSelected).Select(o => o.Id).ToList();
        var response = await CreateStudentEnrollmentClient.Create(classes);
        if (response.IsSuccessStatusCode)
        {
            _finished = true;
            Snackbar.Add("Matrícula salva com sucesso!", Severity.Success);
        }
        else
        {
            var error = await response.ToError();
            Snackbar.Add(error.Message, Severity.Error);
        }
        _loading = false;
    }
}
