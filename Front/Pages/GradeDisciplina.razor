<MudForm @ref="form">
    <MudStack Row="true">
        <MudItem xs="6">
            <MudAutocomplete
                MaxItems="50"
                T="GradeDisciplinaFull"
                SearchFunc="@SearchDisciplina"
                Dense="true"
                Margin="Margin.Dense"
                Variant="Variant.Outlined"
                ShowProgressIndicator="true"
                Class="mb-2"
                Value="@_disciplina"
                ValueChanged="(GradeDisciplinaFull newValue) => HandleDisciplinaChanged(newValue)"
                Label="Disciplina"
                Required="true"
                RequiredError="Informe a disciplina!"
                AdornmentColor="Color.Primary"
            >
                <NoItemsTemplate>
                    <MudText Align="Align.Center" Class="px-4 py-1">
                        @(GetNotFoundMessage())
                    </MudText>
                </NoItemsTemplate>
            </MudAutocomplete>

        </MudItem>
        <MudItem xs="2">
            <MudTextField
                Margin="Margin.Dense"
                Variant="Variant.Outlined"
                T="byte?"
                Value="@_periodo"
                ValueChanged="x => HandlePeriodoChanged(x)"
                Label="Período"
                Required="true"
                RequiredError="Informe o período!"
            />
        </MudItem>
        <MudItem xs="2">
            <MudTextField
                Margin="Margin.Dense"
                Variant="Variant.Outlined"
                T="byte?"
                Value="@_creditos"
                ValueChanged="x => HandleCreditosChanged(x)"
                Label="Créditos"
                Required="true"
                RequiredError="Informe os créditos!"
            />
        </MudItem>
        <MudItem xs="2">
            <MudTextField
                Margin="Margin.Dense"
                Variant="Variant.Outlined"
                T="ushort?"
                Value="@_cargaHoraria"
                ValueChanged="x => HandleCargaHorariaChanged(x)"
                Label="Carga Horária"
                Required="true"
                RequiredError="Informe a carga horária!"
            />
        </MudItem>
    </MudStack>
</MudForm>

@using Syki.Dtos
@using Front.Domain

@code {
    MudForm form;

    [CascadingParameter(Name = "Disciplinas")]
    public List<GradeDisciplinaFull> Disciplinas { get; set; }

    [CascadingParameter(Name = "Curso")]
    public CursoOut? Curso { get; set; }

    GradeDisciplinaFull? _disciplina;
    byte? _periodo;
    byte? _creditos;
    ushort? _cargaHoraria;

    private string GetNotFoundMessage()
    {
        if (Curso == null)
            return "Selecione o curso!";

        if (Disciplinas.Count == 0)
            return "Este curso não possui disciplinas vinculadas.";
        
        return "";
    }

    private async Task<IEnumerable<GradeDisciplinaFull>> SearchDisciplina(string value)
    {
        await Task.Delay(1);

        var filtered = Disciplinas.Where(d => !d.IsSelected || (d.IsSelected && d.Id == _disciplina?.Id));

        if (string.IsNullOrEmpty(value))
            return filtered;

        return filtered.Where(x => x.Nome.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    void HandleDisciplinaChanged(GradeDisciplinaFull newValue)
    {
        if (_disciplina != null)
        {
            Disciplinas.First(d => d.Id == _disciplina.Id).IsSelected = false;
        }

        _cargaHoraria = newValue.CargaHoraria;
        Disciplinas.First(d => d.Id == newValue.Id).IsSelected = true;
        Disciplinas.First(d => d.Id == newValue.Id).Periodo = _periodo;
        Disciplinas.First(d => d.Id == newValue.Id).Creditos = _creditos;
        Disciplinas.First(d => d.Id == newValue.Id).CargaHoraria = _cargaHoraria;

        _disciplina = Disciplinas.First(d => d.Id == newValue.Id);
    }

    void HandlePeriodoChanged(byte? newValue)
    {
        _periodo = newValue;

        if (_disciplina == null) return;

        _disciplina.Periodo = _periodo;
        Disciplinas.First(d => d.Id == _disciplina.Id).Periodo = _periodo;
    }

    void HandleCreditosChanged(byte? newValue)
    {
        _creditos = newValue;

        if (_disciplina == null) return;

        _disciplina.Creditos = _creditos;
        Disciplinas.First(d => d.Id == _disciplina.Id).Creditos = _creditos;
    }

    void HandleCargaHorariaChanged(ushort? newValue)
    {
        _cargaHoraria = newValue;

        if (_disciplina == null) return;

        _disciplina.CargaHoraria = _cargaHoraria;
        Disciplinas.First(d => d.Id == _disciplina.Id).CargaHoraria = _cargaHoraria;
    }
}
