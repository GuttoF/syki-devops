@using Syki.Front.Components.Custom
@using Syki.Front.Components.Buttons

@namespace Syki.Front.Features.Academic.CreateCourseCurriculum

<MudDialog Class="pb-2">
    <TitleContent>
        <SykiDialogTitle Text="Nova Grade" />
    </TitleContent>
    <DialogContent>
        <MudForm @ref="@_form">
            <MudStack Row="true">
                <SykiTextField Label="Nome" AutoFocus="true" @bind-Value="@data.Name" />
                <MudSelect
                    Dense="true"
                    Margin="Margin.Dense"
                    Variant="Variant.Outlined"
                    Value="@_course"
                    ValueChanged="@((CourseOut newValue) => HandleSelectCourse(newValue))"
                    Label="Curso"
                    Required="true"
                    RequiredError="Informe!"
                    AdornmentColor="Color.Primary"
                >
                    @foreach (CourseOut? item in Courses)
                    {
                        <MudSelectItem Value="@item">@item.Name</MudSelectItem>
                    }
                    @if (Courses.Count == 0)
                    {
                        <MudSelectItem Value="@_course" Disabled="true">NÃ£o existem cursos com disciplinas ainda.</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>

            <MudDivider Class="my-4"/>

            <MudContainer Class="px-0">
                <MudGrid Justify="Justify.FlexStart">
                    <MudItem xs="12">
                        <CascadingValue Name="Options" Value="@Options">
                            @foreach (var discipline in Disciplines)
                            {
                                <CourseCurriculumDiscipline Data="@discipline" OnDeleteClick="@DeleteGradeDiscipline" />
                            }
                        </CascadingValue>
                        <MudButton
                            Disabled="(GetNewDisciplineDisabled())"
                            StartIcon="@Icons.Material.Outlined.Add"
                            IconSize="Size.Large"
                            Variant="Variant.Outlined"
                            FullWidth="true"
                            Class="mt-2 border-dashed border-2 mud-border-secundary"
                            Color="Color.Primary"
                            @onclick="@NewGradeDiscipline"
                        >
                            NOVA DISCIPLINA
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudContainer>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <DialogCancelButton OnClick="@Cancel" />
        <SykiProgressCircular Loading="@_loading" />
        <DialogSaveButton OnClick="@Submit" />
    </DialogActions>
</MudDialog>

@inject ISnackbar Snackbar
@inject GetCourseDisciplinesClient GetCourseDisciplinesClient
@inject CreateCourseCurriculumClient CreateCourseCurriculumClient
@inject GetCoursesWithDisciplinesClient GetCoursesWithDisciplinesClient

@code
{
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private MudForm _form;
    private bool _loading;

    CourseOut? _course;
    List<CourseOut> Courses = [];

    List<CourseDisciplineOut> Options = [];
    List<CourseCurriculumDisciplineFillable> Disciplines = [];

    CreateCourseCurriculumIn data = new();

    protected override async Task OnInitializedAsync()
    {
        Courses = await GetCoursesWithDisciplinesClient.Get();
    }

    void NewGradeDiscipline()
    {
        Disciplines.Add(new() { Id = Guid.NewGuid() });
    }

    void DeleteGradeDiscipline(Guid id)
    {
        Disciplines.Remove(Disciplines.First(f => f.Id == id));
        if (Options.Any(x => x.Id == id))
        {
            Options.First(d => d.Id == id).IsSelected = false;
        }
    }

    bool GetNewDisciplineDisabled()
    {
        return _course == null || Options.Count == Disciplines.Count;
    }

    async Task HandleSelectCourse(CourseOut newValue)
    {
        _course = newValue;
        Options = await GetCourseDisciplinesClient.Get(_course!.Id);
        Disciplines = [];
    }

    async Task Submit()
    {
        if (_loading) return;

        await _form.Validate();
        if (!_form.IsValid) return;

        data.CourseId = _course!.Id;
        data.Disciplines = Disciplines
            .ConvertAll(d => new CreateCourseCurriculumDisciplineIn
            (
                d.Id,
                d.Period!.Value,
                d.Credits!.Value,
                d.Workload!.Value
            ));

        _loading = true;
        var response = await CreateCourseCurriculumClient.Create(data.Name, data.CourseId, data.Disciplines);
        if (response.IsSuccessStatusCode)
        {
            MudDialog.Close(DialogResult.Ok(true));
            Snackbar.Add("Grade cadastrada com sucesso!", Severity.Success);
        }
        else
        {
            var error = await response.ToError();
            Snackbar.Add(error.Message, Severity.Error);
        }
        _loading = false;
    }

    void Cancel() => MudDialog.Cancel();
}
