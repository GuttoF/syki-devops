@namespace Syki.Front.Pages.Teacher

@page "/teacher/classes/{classId:guid}/activities/{activityId:guid}"
@attribute [Authorize(Roles = "Teacher")]

<SykiPageTitle Title="Atividade" />

<MudContainer Class="my-4 px-4">
    <MudCard>
        <MudCardContent>
            <MudGrid Class="align-center">
                <MudItem xs="12" sm="8" md="8" lg="8">
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.EditNote" Class="mb-1" Size="Size.Large"/>
                        <MudText Typo="Typo.h5" Class="mt-1" Style="font-weight: bold">Atividade</MudText>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" sm="4" md="4" lg="4" Class="d-flex justify-end">
                    <MudProgressLinear Color="@GetDeliveryRateColor(_activity.GetDeliveryRate())" Rounded="true" Size="Size.Large" Value="@decimal.ToDouble(_activity.GetDeliveryRate())" Style="height: 28px">
                        <MudText Typo="Typo.body1">
                            <b>@GetDeliveryRateFraction(_activity)</b>
                        </MudText>
                    </MudProgressLinear>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
    
    <MudExpansionPanels Class="my-4">
        <MudExpansionPanel Expanded="@_expanded">
            <TitleContent>
                <MudGrid Spacing="3">
                    <MudItem xs="12" sm="12" md="12" lg="12">
                        <MudText Typo="Typo.h6">@_activity.Title</MudText>
                    </MudItem>

                    <MudItem xs="3" sm="2" md="2" lg="2">
                        <SykiLabelText Label="Nota" Text="@_activity.Note.ToString()" />
                    </MudItem>
                    <MudItem xs="5" sm="2" md="2" lg="2">
                        <SykiLabelText Label="Tipo" Text="@_activity.Type.GetDescription()" />
                    </MudItem>
                    <MudItem xs="4" sm="2" md="2" lg="2">
                        <SykiLabelText Label="Peso (%)" Text="@_activity.Weight.ToString()" />
                    </MudItem>

                    <MudItem xs="6" sm="3" md="3" lg="3">
                        <SykiLabelText Label="Criada em" Text="@_activity.CreatedAt.ToLocalTime().Format()" />
                    </MudItem>
                    <MudItem xs="6" sm="3" md="3" lg="3">
                        <SykiLabelText Label="Data de entrega" Text="@_activity.GetDueDate()" />
                    </MudItem>
                </MudGrid>
            </TitleContent>
            <ChildContent>
                <MudContainer Class="px-0">
                    <MudDivider DividerType="DividerType.Middle" Class="mx-0 mb-4" />
                    <MudText Style="white-space: pre-line;">
                        @_activity.Description
                    </MudText>
                </MudContainer>
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>

    <MudContainer Class="px-0 mb-4">
        <MudDataGrid Class="pa-4" Items="@_activity.Works" QuickFilter="@_quickFilter" Hover="true" SortMode="@SortMode.None" Loading="@_loading" Dense="true" RowsPerPage="100">
            <ToolBarContent>
                <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque pelo nome" />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.StudentName" Title="Aluno" />
                <PropertyColumn Property="x => x.Status.GetDescription()" Title="Status" />
                <PropertyColumn Property="x => x.Note.Format()" Title="Nota" />
                <PropertyColumn Property="x => x.GetLink()" Title="Link" />
                <TemplateColumn>
                    <CellTemplate>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.RemoveRedEye" OnClick="@(() => OpenDrawer(context.Item))" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <NoRecordsContent>
                @(GetNotFoundMessage())
            </NoRecordsContent>
        </MudDataGrid>
    </MudContainer>
</MudContainer>

<MudDrawer Anchor="Anchor.Right" @bind-Open="@_rightOpen" Variant="DrawerVariant.Temporary" OverlayAutoClose="true" Elevation="1" Width="460px">
	<MudDrawerHeader Class="justify-space-between px-4 py-1">
		<MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Spacing="3">
			<MudIcon Icon="@Icons.Material.Filled.BookmarkAdded"></MudIcon>
			<MudText Typo="Typo.h5"><b>Entrega</b></MudText>
		</MudStack>
		<MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="@CloseDrawer" />
	</MudDrawerHeader>
    <MudDivider DividerType="DividerType.Middle" />
    <MudDrawerContainer>
        <MudPaper Class="pa-4" Style="overflow-x: hidden" Elevation="0">
            <MudForm Spacing="0">
                <MudGrid Spacing="2">
                    <MudItem xs="12" sm="12" md="12" lg="12">
                        <MudNumericField
                            T="decimal"
                            @bind-Value="@_note"
                            Max="10.00M"
                            MaxLength="4"
                            Min="0"
                            Format="N2"
                            HideSpinButtons="true"
                            Variant="Variant.Outlined"
                            Margin="Margin.Dense"
                        />
                    </MudItem>
                </MudGrid>
            </MudForm>
            <DialogSaveButton OnClick="@Submit" />
        </MudPaper>
    </MudDrawerContainer>
</MudDrawer>

@inject ISnackbar Snackbar
@inject GetTeacherClassActivityClient GetTeacherClassActivityClient
@inject AddStudentClassActivityNoteClient AddStudentClassActivityNoteClient

@code
{
	[Parameter]
	public Guid ClassId { get; set; }

	[Parameter]
	public Guid ActivityId { get; set; }

    private bool _loading;
    private string _searchString;
    private bool _expanded = true;
    private TeacherClassActivityOut _activity = new();

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _activity = await GetTeacherClassActivityClient.Get(ClassId, ActivityId);
        _loading = false;
    }

    private decimal _note;
    private bool _rightOpen;
    private ClassActivityWorkOut _selected = new();
    private void OpenDrawer(ClassActivityWorkOut work)
    {
        _note = 0;
        _selected = work;
        _rightOpen = true;
    }
    private void CloseDrawer()
    {
        _note = 0;
        _selected = new();
        _rightOpen = false;
    }
    private async Task Submit()
    {
        var result = await AddStudentClassActivityNoteClient.Add(ActivityId, _selected.StudentId, _note);
        if (result.IsSuccess())
        {
            Snackbar.Add("Nota adicionada com sucesso!", Severity.Success);
            CloseDrawer();
        }
        else
        {
            Snackbar.Add(result.GetError().Message, Severity.Error);
        }
    }

    private string GetDeliveryRateFraction(TeacherClassActivityOut activity)
    {
        return $"{activity.DeliveredWorks} / {activity.TotalWorks} entregas";
    }

    private Color GetDeliveryRateColor(decimal deliveryRate)
    {
        if (deliveryRate == 100M) return Color.Success;

        return deliveryRate >= 70 ? Color.Warning : Color.Error;
    }

    private Func<ClassActivityWorkOut, bool> _quickFilter => x => _searchString.IsIn(x.StudentName);

    private string GetNotFoundMessage()
    {
        return _searchString.IsEmpty() ? "Não existem turmas cadastradas ainda." : "Nenhuma turma encontrada.";
    }
}
