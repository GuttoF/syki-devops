@namespace Syki.Front.Features.Cross.SetupMfa

<MudPaper Style="position: relative; height: 100%">
    <MudOverlay @bind-Visible="@_validateCodeLoading" LightBackground="true" Absolute="true">
        <MudProgressCircular Color="Color.Info" Indeterminate="true" Size="Size.Large" />
    </MudOverlay>

    <style>input { text-align: center; font-size: 24px !important; letter-spacing: 3px !important; }</style>
    <MudCard Class="px-4 py-0" Elevation="0" Style="height: 100%">
        <MudCardContent>
            <MudStack AlignItems="AlignItems.Center">
                <MudAlert Severity="Severity.Info" Variant="Variant.Text">
                    <MudStack Row="true" Justify="Justify.SpaceAround">
                        <MudText>Insira o código para finalizar o setup</MudText>
                    </MudStack>
                </MudAlert>
                <MudForm>
                    <MudTextField
                        T="String"
                        Immediate="true"
                        Placeholder="_ _ _  _ _ _"
                        OnlyValidateIfDirty="true"
                        Variant="Variant.Outlined"
                        ReadOnly="@_validateCodeLoading"
                        Disabled="@_codeIsCorrect"
                        Style="width: 200px;"
                        Class="mt-8"
                        AutoFocus="true"
                        Value="@_userCode"
                        ValueChanged="@HandleCodeChanged"
                        Mask="@(new PatternMask("000 000"))"
                    />
                </MudForm>

                @if (_showCodeFeedback && !_codeIsCorrect)
                {
                    <MudAlert Class="mt-4" Severity="Severity.Error" Variant="Variant.Text">
                        <MudStack Row="true" Justify="Justify.SpaceAround">
                            <MudText>Código inválido</MudText>
                        </MudStack>
                    </MudAlert>
                }
            </MudStack>
        </MudCardContent>
    </MudCard>
</MudPaper>

@inject SetupMfaClient Client
@inject IDialogService DialogService

@code
{
    private string _userCode;
    private bool _validateCodeLoading;
    private bool _showCodeFeedback;
    private bool _codeIsCorrect;

    private async Task HandleCodeChanged(string newValue)
    {
        _showCodeFeedback = false;
        _userCode = newValue;

        if (_userCode.OnlyNumbers().Length == 6)
        {
            _validateCodeLoading = true;
            await Task.Delay(3000);
            _codeIsCorrect = await Client.Setup(_userCode);
            _showCodeFeedback = true;
            _validateCodeLoading = false;
        }

        if (_codeIsCorrect)
        {
            await OpenDialog();
        }
    }

    private async Task OpenDialog()
    {
        var options = new DialogOptions {
            FullWidth = true,
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
        };
        await DialogService.ShowAsync<SetupMfaDialog>("", options);
    }
}
