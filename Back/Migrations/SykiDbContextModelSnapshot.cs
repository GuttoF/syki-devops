// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Syki.Back.Database;

#nullable disable

namespace Back.Migrations
{
    [DbContext(typeof(SykiDbContext))]
    partial class SykiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("syki")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_role_id");

                    b.ToTable("role_claims", "syki");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("user_claims", "syki");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("user_logins", "syki");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("user_roles", "syki");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("user_tokens", "syki");
                });

            modelBuilder.Entity("Syki.Back.Audit.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<JsonDocument>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entity_type");

                    b.Property<Guid>("FaculdadeId")
                        .HasColumnType("uuid")
                        .HasColumnName("faculdade_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_audit_logs");

                    b.HasIndex("FaculdadeId", "UserId")
                        .HasDatabaseName("ix_audit_logs_faculdade_id_user_id");

                    b.ToTable("audit_logs", "syki");
                });

            modelBuilder.Entity("Syki.Back.CreateAcademicPeriod.AcademicPeriod", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid")
                        .HasColumnName("institution_id");

                    b.Property<DateOnly>("End")
                        .HasColumnType("date")
                        .HasColumnName("end");

                    b.Property<DateOnly>("Start")
                        .HasColumnType("date")
                        .HasColumnName("start");

                    b.HasKey("Id", "InstitutionId")
                        .HasName("pk_academic_periods");

                    b.HasIndex("InstitutionId")
                        .HasDatabaseName("ix_academic_periods_institution_id");

                    b.ToTable("academic_periods", "syki");
                });

            modelBuilder.Entity("Syki.Back.CreateAluno.Aluno", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid")
                        .HasColumnName("institution_id");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("matricula");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<Guid>("OfertaId")
                        .HasColumnType("uuid")
                        .HasColumnName("oferta_id");

                    b.HasKey("Id")
                        .HasName("pk_alunos");

                    b.HasIndex("OfertaId")
                        .HasDatabaseName("ix_alunos_oferta_id");

                    b.HasIndex("InstitutionId", "Id")
                        .IsUnique()
                        .HasDatabaseName("ix_alunos_institution_id_id");

                    b.ToTable("alunos", "syki");
                });

            modelBuilder.Entity("Syki.Back.CreateCampus.Campus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid")
                        .HasColumnName("institution_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_campi");

                    b.HasIndex("InstitutionId")
                        .HasDatabaseName("ix_campi_institution_id");

                    b.ToTable("campi", "syki");
                });

            modelBuilder.Entity("Syki.Back.CreateCurso.Curso", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("FaculdadeId")
                        .HasColumnType("uuid")
                        .HasColumnName("faculdade_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo");

                    b.HasKey("Id")
                        .HasName("pk_cursos");

                    b.HasIndex("FaculdadeId")
                        .HasDatabaseName("ix_cursos_faculdade_id");

                    b.ToTable("cursos", "syki");
                });

            modelBuilder.Entity("Syki.Back.CreateDisciplina.CursoDisciplina", b =>
                {
                    b.Property<Guid>("CursoId")
                        .HasColumnType("uuid")
                        .HasColumnName("curso_id");

                    b.Property<Guid>("DisciplinaId")
                        .HasColumnType("uuid")
                        .HasColumnName("disciplina_id");

                    b.HasKey("CursoId", "DisciplinaId")
                        .HasName("pk_cursos__disciplinas");

                    b.HasIndex("DisciplinaId")
                        .HasDatabaseName("ix_cursos__disciplinas_disciplina_id");

                    b.ToTable("cursos__disciplinas", "syki");
                });

            modelBuilder.Entity("Syki.Back.CreateDisciplina.Disciplina", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("FaculdadeId")
                        .HasColumnType("uuid")
                        .HasColumnName("faculdade_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("pk_disciplinas");

                    b.HasIndex("FaculdadeId")
                        .HasDatabaseName("ix_disciplinas_faculdade_id");

                    b.ToTable("disciplinas", "syki");
                });

            modelBuilder.Entity("Syki.Back.CreateEnrollmentPeriod.EnrollmentPeriod", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid")
                        .HasColumnName("institution_id");

                    b.Property<DateOnly>("End")
                        .HasColumnType("date")
                        .HasColumnName("end");

                    b.Property<DateOnly>("Start")
                        .HasColumnType("date")
                        .HasColumnName("start");

                    b.HasKey("Id", "InstitutionId")
                        .HasName("pk_enrollment_periods");

                    b.ToTable("enrollment_periods", "syki");
                });

            modelBuilder.Entity("Syki.Back.CreateInstitution.Faculdade", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("pk_faculdades");

                    b.ToTable("faculdades", "syki");
                });

            modelBuilder.Entity("Syki.Back.CreateNotification.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("FaculdadeId")
                        .HasColumnType("uuid")
                        .HasColumnName("faculdade_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.HasIndex("FaculdadeId")
                        .HasDatabaseName("ix_notifications_faculdade_id");

                    b.ToTable("notifications", "syki");
                });

            modelBuilder.Entity("Syki.Back.CreateOferta.Oferta", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CampusId")
                        .HasColumnType("uuid")
                        .HasColumnName("campus_id");

                    b.Property<Guid>("CursoId")
                        .HasColumnType("uuid")
                        .HasColumnName("curso_id");

                    b.Property<Guid>("FaculdadeId")
                        .HasColumnType("uuid")
                        .HasColumnName("faculdade_id");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid")
                        .HasColumnName("grade_id");

                    b.Property<string>("Periodo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("periodo");

                    b.Property<string>("Turno")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("turno");

                    b.HasKey("Id")
                        .HasName("pk_ofertas");

                    b.HasIndex("CampusId")
                        .HasDatabaseName("ix_ofertas_campus_id");

                    b.HasIndex("CursoId")
                        .HasDatabaseName("ix_ofertas_curso_id");

                    b.HasIndex("FaculdadeId")
                        .HasDatabaseName("ix_ofertas_faculdade_id");

                    b.HasIndex("GradeId")
                        .HasDatabaseName("ix_ofertas_grade_id");

                    b.HasIndex("Periodo", "FaculdadeId")
                        .HasDatabaseName("ix_ofertas_periodo_faculdade_id");

                    b.ToTable("ofertas", "syki");
                });

            modelBuilder.Entity("Syki.Back.CreatePendingUserRegister.UserRegister", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateOnly?>("TrialEnd")
                        .HasColumnType("date")
                        .HasColumnName("trial_end");

                    b.Property<DateOnly?>("TrialStart")
                        .HasColumnType("date")
                        .HasColumnName("trial_start");

                    b.HasKey("Id")
                        .HasName("pk_user_registers");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_user_registers_email");

                    b.ToTable("user_registers", "syki");
                });

            modelBuilder.Entity("Syki.Back.CreateProfessor.Professor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("FaculdadeId")
                        .HasColumnType("uuid")
                        .HasColumnName("faculdade_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("pk_professores");

                    b.HasIndex("FaculdadeId", "Id")
                        .IsUnique()
                        .HasDatabaseName("ix_professores_faculdade_id_id");

                    b.ToTable("professores", "syki");
                });

            modelBuilder.Entity("Syki.Back.CreateUser.SykiRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", "syki");

                    b.HasData(
                        new
                        {
                            Id = new Guid("07bc2fce-ebc1-48d1-b501-99fce0456150"),
                            ConcurrencyStamp = "1af0b99a-9266-43d5-8c46-693f5fa872b7",
                            Name = "Adm",
                            NormalizedName = "ADM"
                        },
                        new
                        {
                            Id = new Guid("02e6f940-c942-496b-89e7-71aeeac39354"),
                            ConcurrencyStamp = "ec7d9541-b710-4392-a14a-0bde98c7e647",
                            Name = "Academico",
                            NormalizedName = "ACADEMICO"
                        },
                        new
                        {
                            Id = new Guid("205a4576-6279-4ee3-a827-37a63676c8cd"),
                            ConcurrencyStamp = "f6a82d5d-d577-45c0-b4bb-676b892aa9fd",
                            Name = "Professor",
                            NormalizedName = "PROFESSOR"
                        },
                        new
                        {
                            Id = new Guid("84c85d5f-cbfc-473b-b3df-a60a65098caa"),
                            ConcurrencyStamp = "6808dfaa-74d6-456e-8ad8-99c3ee1edd83",
                            Name = "Aluno",
                            NormalizedName = "ALUNO"
                        });
                });

            modelBuilder.Entity("Syki.Back.CreateUser.SykiUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid")
                        .HasColumnName("institution_id");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasAlternateKey("InstitutionId", "Id")
                        .HasName("ak_asp_net_users_institution_id_id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users", "syki");
                });

            modelBuilder.Entity("Syki.Back.Domain.Aula", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start");

                    b.Property<Guid>("TurmaId")
                        .HasColumnType("uuid")
                        .HasColumnName("turma_id");

                    b.HasKey("Id")
                        .HasName("pk_aulas");

                    b.HasIndex("TurmaId")
                        .HasDatabaseName("ix_aulas_turma_id");

                    b.ToTable("aulas", "syki");
                });

            modelBuilder.Entity("Syki.Back.Domain.Chamada", b =>
                {
                    b.Property<Guid>("AulaId")
                        .HasColumnType("uuid")
                        .HasColumnName("aula_id");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("uuid")
                        .HasColumnName("aluno_id");

                    b.Property<bool>("Presente")
                        .HasColumnType("boolean")
                        .HasColumnName("presente");

                    b.HasKey("AulaId", "AlunoId")
                        .HasName("pk_chamadas");

                    b.HasIndex("AlunoId")
                        .HasDatabaseName("ix_chamadas_aluno_id");

                    b.ToTable("chamadas", "syki");
                });

            modelBuilder.Entity("Syki.Back.Domain.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CursoId")
                        .HasColumnType("uuid")
                        .HasColumnName("curso_id");

                    b.Property<Guid>("FaculdadeId")
                        .HasColumnType("uuid")
                        .HasColumnName("faculdade_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("pk_grades");

                    b.HasIndex("CursoId")
                        .HasDatabaseName("ix_grades_curso_id");

                    b.HasIndex("FaculdadeId")
                        .HasDatabaseName("ix_grades_faculdade_id");

                    b.ToTable("grades", "syki");
                });

            modelBuilder.Entity("Syki.Back.Domain.GradeDisciplina", b =>
                {
                    b.Property<Guid>("DisciplinaId")
                        .HasColumnType("uuid")
                        .HasColumnName("disciplina_id");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid")
                        .HasColumnName("grade_id");

                    b.Property<int>("CargaHoraria")
                        .HasColumnType("integer")
                        .HasColumnName("carga_horaria");

                    b.Property<byte>("Creditos")
                        .HasColumnType("smallint")
                        .HasColumnName("creditos");

                    b.Property<byte>("Periodo")
                        .HasColumnType("smallint")
                        .HasColumnName("periodo");

                    b.HasKey("DisciplinaId", "GradeId")
                        .HasName("pk_grades__disciplinas");

                    b.HasIndex("GradeId")
                        .HasDatabaseName("ix_grades__disciplinas_grade_id");

                    b.ToTable("grades__disciplinas", "syki");
                });

            modelBuilder.Entity("Syki.Back.Domain.Horario", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Dia")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("dia");

                    b.Property<string>("End")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("end");

                    b.Property<string>("Start")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("start");

                    b.Property<Guid>("TurmaId")
                        .HasColumnType("uuid")
                        .HasColumnName("turma_id");

                    b.HasKey("Id")
                        .HasName("pk_horarios");

                    b.HasIndex("TurmaId")
                        .HasDatabaseName("ix_horarios_turma_id");

                    b.ToTable("horarios", "syki");
                });

            modelBuilder.Entity("Syki.Back.Domain.Turma", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DisciplinaId")
                        .HasColumnType("uuid")
                        .HasColumnName("disciplina_id");

                    b.Property<Guid>("FaculdadeId")
                        .HasColumnType("uuid")
                        .HasColumnName("faculdade_id");

                    b.Property<string>("Periodo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("periodo");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uuid")
                        .HasColumnName("professor_id");

                    b.HasKey("Id")
                        .HasName("pk_turmas");

                    b.HasIndex("DisciplinaId")
                        .HasDatabaseName("ix_turmas_disciplina_id");

                    b.HasIndex("ProfessorId")
                        .HasDatabaseName("ix_turmas_professor_id");

                    b.HasIndex("Periodo", "FaculdadeId")
                        .HasDatabaseName("ix_turmas_periodo_faculdade_id");

                    b.ToTable("turmas", "syki");
                });

            modelBuilder.Entity("Syki.Back.Domain.TurmaAluno", b =>
                {
                    b.Property<Guid>("AlunoId")
                        .HasColumnType("uuid")
                        .HasColumnName("aluno_id");

                    b.Property<Guid>("TurmaId")
                        .HasColumnType("uuid")
                        .HasColumnName("turma_id");

                    b.Property<string>("Situacao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("situacao");

                    b.HasKey("AlunoId", "TurmaId")
                        .HasName("pk_turmas__alunos");

                    b.HasIndex("TurmaId")
                        .HasDatabaseName("ix_turmas__alunos_turma_id");

                    b.ToTable("turmas__alunos", "syki");
                });

            modelBuilder.Entity("Syki.Back.Domain.UserNotification", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("notification_id");

                    b.Property<DateTime?>("ViewedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("viewed_at");

                    b.HasKey("UserId", "NotificationId")
                        .HasName("pk_users__notifications");

                    b.HasIndex("NotificationId")
                        .HasDatabaseName("ix_users__notifications_notification_id");

                    b.ToTable("users__notifications", "syki");
                });

            modelBuilder.Entity("Syki.Back.SendResetPasswordToken.ResetPasswordToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("used_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reset_password_tokens");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("ix_reset_password_tokens_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reset_password_tokens_user_id");

                    b.ToTable("reset_password_tokens", "syki");
                });

            modelBuilder.Entity("Syki.Back.Tasks.SykiTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("processed_at");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_tasks");

                    b.ToTable("tasks", "syki");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Syki.Back.CreateUser.SykiRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Syki.Back.CreateUser.SykiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Syki.Back.CreateUser.SykiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Syki.Back.CreateUser.SykiRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_asp_net_roles_role_id");

                    b.HasOne("Syki.Back.CreateUser.SykiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Syki.Back.CreateUser.SykiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Syki.Back.Audit.AuditLog", b =>
                {
                    b.HasOne("Syki.Back.CreateUser.SykiUser", null)
                        .WithMany()
                        .HasForeignKey("FaculdadeId", "UserId")
                        .HasPrincipalKey("InstitutionId", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audit_logs_asp_net_users_syki_user_id");
                });

            modelBuilder.Entity("Syki.Back.CreateAcademicPeriod.AcademicPeriod", b =>
                {
                    b.HasOne("Syki.Back.CreateInstitution.Faculdade", null)
                        .WithMany("AcademicPeriods")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academic_periods_institutions_faculdade_id");
                });

            modelBuilder.Entity("Syki.Back.CreateAluno.Aluno", b =>
                {
                    b.HasOne("Syki.Back.CreateInstitution.Faculdade", null)
                        .WithMany("Alunos")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_alunos_institutions_faculdade_id");

                    b.HasOne("Syki.Back.CreateOferta.Oferta", "Oferta")
                        .WithMany()
                        .HasForeignKey("OfertaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_alunos_ofertas_oferta_id1");

                    b.HasOne("Syki.Back.CreateUser.SykiUser", "User")
                        .WithOne()
                        .HasForeignKey("Syki.Back.CreateAluno.Aluno", "InstitutionId", "Id")
                        .HasPrincipalKey("Syki.Back.CreateUser.SykiUser", "InstitutionId", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_alunos_asp_net_users_user_id");

                    b.Navigation("Oferta");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Syki.Back.CreateCampus.Campus", b =>
                {
                    b.HasOne("Syki.Back.CreateInstitution.Faculdade", null)
                        .WithMany("Campi")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_campi_institutions_faculdade_id");
                });

            modelBuilder.Entity("Syki.Back.CreateCurso.Curso", b =>
                {
                    b.HasOne("Syki.Back.CreateInstitution.Faculdade", null)
                        .WithMany("Cursos")
                        .HasForeignKey("FaculdadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cursos_institutions_faculdade_id");
                });

            modelBuilder.Entity("Syki.Back.CreateDisciplina.CursoDisciplina", b =>
                {
                    b.HasOne("Syki.Back.CreateCurso.Curso", null)
                        .WithMany("Vinculos")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cursos__disciplinas_cursos_curso_id");

                    b.HasOne("Syki.Back.CreateDisciplina.Disciplina", null)
                        .WithMany("Vinculos")
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cursos__disciplinas_disciplinas_disciplina_id");
                });

            modelBuilder.Entity("Syki.Back.CreateDisciplina.Disciplina", b =>
                {
                    b.HasOne("Syki.Back.CreateInstitution.Faculdade", null)
                        .WithMany("Disciplinas")
                        .HasForeignKey("FaculdadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_disciplinas_institutions_faculdade_id");
                });

            modelBuilder.Entity("Syki.Back.CreateEnrollmentPeriod.EnrollmentPeriod", b =>
                {
                    b.HasOne("Syki.Back.CreateAcademicPeriod.AcademicPeriod", null)
                        .WithOne()
                        .HasForeignKey("Syki.Back.CreateEnrollmentPeriod.EnrollmentPeriod", "Id", "InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enrollment_periods_academic_periods_academic_period_id_acad");
                });

            modelBuilder.Entity("Syki.Back.CreateNotification.Notification", b =>
                {
                    b.HasOne("Syki.Back.CreateInstitution.Faculdade", null)
                        .WithMany("Notifications")
                        .HasForeignKey("FaculdadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notifications_institutions_faculdade_id");
                });

            modelBuilder.Entity("Syki.Back.CreateOferta.Oferta", b =>
                {
                    b.HasOne("Syki.Back.CreateCampus.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ofertas_campi_campus_temp_id");

                    b.HasOne("Syki.Back.CreateCurso.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ofertas_cursos_curso_id");

                    b.HasOne("Syki.Back.CreateInstitution.Faculdade", null)
                        .WithMany("Ofertas")
                        .HasForeignKey("FaculdadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ofertas_institutions_faculdade_id");

                    b.HasOne("Syki.Back.Domain.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ofertas_grades_grade_id");

                    b.HasOne("Syki.Back.CreateAcademicPeriod.AcademicPeriod", null)
                        .WithMany()
                        .HasForeignKey("Periodo", "FaculdadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ofertas_academic_periods_academic_period_id_academic_period");

                    b.Navigation("Campus");

                    b.Navigation("Curso");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("Syki.Back.CreateProfessor.Professor", b =>
                {
                    b.HasOne("Syki.Back.CreateInstitution.Faculdade", null)
                        .WithMany("Professores")
                        .HasForeignKey("FaculdadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_professores_institutions_faculdade_id");

                    b.HasOne("Syki.Back.CreateUser.SykiUser", null)
                        .WithOne()
                        .HasForeignKey("Syki.Back.CreateProfessor.Professor", "FaculdadeId", "Id")
                        .HasPrincipalKey("Syki.Back.CreateUser.SykiUser", "InstitutionId", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_professores_asp_net_users_syki_user_id");
                });

            modelBuilder.Entity("Syki.Back.CreateUser.SykiUser", b =>
                {
                    b.HasOne("Syki.Back.CreateInstitution.Faculdade", null)
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_faculdades_institution_id");
                });

            modelBuilder.Entity("Syki.Back.Domain.Aula", b =>
                {
                    b.HasOne("Syki.Back.Domain.Turma", null)
                        .WithMany("Aulas")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aulas_turmas_turma_id");
                });

            modelBuilder.Entity("Syki.Back.Domain.Chamada", b =>
                {
                    b.HasOne("Syki.Back.CreateAluno.Aluno", null)
                        .WithMany()
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chamadas_alunos_aluno_id");

                    b.HasOne("Syki.Back.Domain.Aula", null)
                        .WithMany()
                        .HasForeignKey("AulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chamadas_aulas_aula_id");
                });

            modelBuilder.Entity("Syki.Back.Domain.Grade", b =>
                {
                    b.HasOne("Syki.Back.CreateCurso.Curso", "Curso")
                        .WithMany("Grades")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_grades_cursos_curso_id");

                    b.HasOne("Syki.Back.CreateInstitution.Faculdade", null)
                        .WithMany("Grades")
                        .HasForeignKey("FaculdadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_grades_institutions_faculdade_id");

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("Syki.Back.Domain.GradeDisciplina", b =>
                {
                    b.HasOne("Syki.Back.CreateDisciplina.Disciplina", null)
                        .WithMany()
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_grades__disciplinas_disciplinas_disciplina_id");

                    b.HasOne("Syki.Back.Domain.Grade", null)
                        .WithMany("Vinculos")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_grades__disciplinas_grades_grade_id");
                });

            modelBuilder.Entity("Syki.Back.Domain.Horario", b =>
                {
                    b.HasOne("Syki.Back.Domain.Turma", null)
                        .WithMany("Horarios")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_horarios_turmas_turma_id");
                });

            modelBuilder.Entity("Syki.Back.Domain.Turma", b =>
                {
                    b.HasOne("Syki.Back.CreateDisciplina.Disciplina", "Disciplina")
                        .WithMany()
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_turmas_disciplinas_disciplina_id");

                    b.HasOne("Syki.Back.CreateProfessor.Professor", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_turmas_professores_professor_id");

                    b.HasOne("Syki.Back.CreateAcademicPeriod.AcademicPeriod", null)
                        .WithMany()
                        .HasForeignKey("Periodo", "FaculdadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_turmas_academic_periods_academic_period_id_academic_period_");

                    b.Navigation("Disciplina");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("Syki.Back.Domain.TurmaAluno", b =>
                {
                    b.HasOne("Syki.Back.CreateAluno.Aluno", null)
                        .WithMany()
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_turmas__alunos_alunos_aluno_id");

                    b.HasOne("Syki.Back.Domain.Turma", null)
                        .WithMany()
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_turmas__alunos_turmas_turma_id");
                });

            modelBuilder.Entity("Syki.Back.Domain.UserNotification", b =>
                {
                    b.HasOne("Syki.Back.CreateNotification.Notification", "Notification")
                        .WithMany("Users")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users__notifications_notifications_notification_id");

                    b.HasOne("Syki.Back.CreateUser.SykiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users__notifications_asp_net_users_syki_user_id");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Syki.Back.SendResetPasswordToken.ResetPasswordToken", b =>
                {
                    b.HasOne("Syki.Back.CreateUser.SykiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reset_password_tokens_asp_net_users_syki_user_id");
                });

            modelBuilder.Entity("Syki.Back.CreateCurso.Curso", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Vinculos");
                });

            modelBuilder.Entity("Syki.Back.CreateDisciplina.Disciplina", b =>
                {
                    b.Navigation("Vinculos");
                });

            modelBuilder.Entity("Syki.Back.CreateInstitution.Faculdade", b =>
                {
                    b.Navigation("AcademicPeriods");

                    b.Navigation("Alunos");

                    b.Navigation("Campi");

                    b.Navigation("Cursos");

                    b.Navigation("Disciplinas");

                    b.Navigation("Grades");

                    b.Navigation("Notifications");

                    b.Navigation("Ofertas");

                    b.Navigation("Professores");
                });

            modelBuilder.Entity("Syki.Back.CreateNotification.Notification", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Syki.Back.Domain.Grade", b =>
                {
                    b.Navigation("Vinculos");
                });

            modelBuilder.Entity("Syki.Back.Domain.Turma", b =>
                {
                    b.Navigation("Aulas");

                    b.Navigation("Horarios");
                });
#pragma warning restore 612, 618
        }
    }
}
