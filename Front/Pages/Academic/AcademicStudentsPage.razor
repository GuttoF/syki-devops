@using Syki.Front.Features.Academic.CreateStudent

@namespace Syki.Front.Pages.Academic

@page "/academic/students"
@attribute [Authorize(Roles = "Academic")]

<PageTitle>Alunos</PageTitle>

<MudContainer>
    <SykiPageHeader Icon="@Icons.Material.Filled.People" Title="Alunos" ButtonText="Novo Aluno" OnClick="@OpenDialog"/>
    <SykiPageAlert Text="Um aluno precisa necessariamente estar vinculado à uma oferta de curso." />
    <MudContainer Class="px-4 mb-8">
        <MudDataGrid Class="pa-4" Items="@_students" QuickFilter="@_quickFilter" Hover="true" Loading="@_loading" Dense="true" RowsPerPage="10">
            <ToolBarContent>
                <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por qualquer campo" />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Nome" />
                <PropertyColumn Property="x => x.Email" Title="Email" />
                <PropertyColumn Property="x => x.EnrollmentCode" Title="Matrícula" />
                <PropertyColumn Property="x => x.CourseOffering" Title="Curso" />
            </Columns>
            <NoRecordsContent>
                @(GetNotFoundMessage())
            </NoRecordsContent>
            <PagerContent>
                <SykiDataGridPager T="StudentOut" />
            </PagerContent>
        </MudDataGrid>
    </MudContainer>
</MudContainer>

@inject GetStudentsClient Client
@inject IDialogService DialogService

@code
{
    private bool _loading;
    private string _searchString;
    private List<StudentOut> _students = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _students = await Client.Get();
        _loading = false;
    }

    private Func<StudentOut, bool> _quickFilter => x => _searchString.IsIn(x.Name, x.Email, x.EnrollmentCode, x.CourseOffering);

    private async Task OpenDialog()
    {
        var options = new DialogOptions {
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };
        var dialog = await DialogService.ShowAsync<CreateStudentDialog>("", options);

        var result = await dialog.Result;

        if (result!.Canceled) return;
        
        await OnInitializedAsync();
    }

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem alunos cadastrados ainda." : "Nenhum aluno encontrado.";
    }
}
