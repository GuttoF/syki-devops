#cloud-config
write_files:
  - path: /etc/resolv.conf
    content: |
      nameserver 8.8.8.8
      nameserver 8.8.4.4
    permissions: '0644'
    owner: root:root
    defer: false

package_update: true
package_upgrade: true

packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - software-properties-common
  - git

runcmd:
  # Garantir resolução DNS correta
  - echo "nameserver 8.8.8.8" > /etc/resolv.conf
  - echo "nameserver 8.8.4.4" >> /etc/resolv.conf

  # Install Docker
  - curl -fsSL https://get.docker.com -o get-docker.sh
  - sh get-docker.sh
  - systemctl enable docker
  - systemctl start docker

  # Create Docker network
  - docker network create sykinet

  # Create volumes
  - docker volume create pgdata
  - docker volume create grafana-data
  - docker volume create prometheus-data

  # Run PostgreSQL
  - |
    docker run -d \
      --name db \
      --hostname db_host \
      --network sykinet \
      -e POSTGRES_DB=syki-db \
      -e POSTGRES_USER=postgres \
      -e POSTGRES_PASSWORD=${postgres_password} \
      -p 5432:5432 \
      --cpus=1 \
      --memory=1g \
      -v pgdata:/var/lib/postgresql/data \
      --health-cmd="pg_isready -U postgres -d syki-db -h localhost" \
      --health-interval=5s \
      --health-timeout=10s \
      --health-retries=5 \
      --health-start-period=10s \
      --restart unless-stopped \
      postgres:17.4-alpine3.21 \
      postgres -c max_connections=1500 -c max_prepared_transactions=64 -c log_statement=all

  # Clone repository and build images
  - git clone https://github.com/GuttoF/syki-devops.git /opt/syki
  - cd /opt/syki
  - docker build -t syki-back:latest -f Docker/Dockerfile.back .
  - docker build -t syki-front:latest -f Docker/Dockerfile.front .
  - docker build -t syki-daemon:latest -f Docker/Dockerfile.daemon .

  # Wait for DB to be ready
  - |
    until docker exec db pg_isready -U postgres -h localhost; do
      echo "Waiting for database connection..."
      sleep 5
    done

  # Run backend
  - |
    docker run -d \
      --name back \
      --network sykinet \
      -e ASPNETCORE_ENVIRONMENT=Development \
      -e "Database__ConnectionString=UserID=postgres;Password=${postgres_password};Host=db_host;Port=5432;Database=syki-db;Pooling=true;" \
      -p 5001:8080 \
      --cpus=0.5 \
      --memory=512m \
      --health-cmd="curl -f http://localhost:8080/health || exit 1" \
      --health-interval=30s \
      --health-timeout=5s \
      --restart unless-stopped \
      syki-back:latest

  # Run frontend
  - |
    docker run -d \
      --name front \
      --network sykinet \
      -p 5002:80 \
      --cpus=0.3 \
      --memory=256m \
      --restart unless-stopped \
      syki-front:latest

  # Run daemon
  - |
    docker run -d \
      --name daemon \
      --network sykinet \
      -e ASPNETCORE_ENVIRONMENT=Development \
      -e "Database__ConnectionString=UserID=postgres;Password=${postgres_password};Host=db_host;Port=5432;Database=syki-db;Pooling=true;Keepalive=60;" \
      -p 5003:8080 \
      --cpus=0.5 \
      --memory=512m \
      --restart unless-stopped \
      syki-daemon:latest

  # Prometheus
  - mkdir -p /opt/prometheus
  - |
    cat > /opt/prometheus/prometheus.yml << EOF
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: 'back'
        static_configs:
          - targets: ['back:8080']
      - job_name: 'daemon'
        static_configs:
          - targets: ['daemon:8080']
    EOF

  # Run Prometheus
  - |
    docker run -d \
      --name prometheus \
      --network sykinet \
      -v prometheus-data:/prometheus \
      -v /opt/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml \
      -p 9090:9090 \
      --restart unless-stopped \
      prom/prometheus:v2.45.0

  # Run Grafana
  - |
    docker run -d \
      --name grafana \
      --network sykinet \
      -p 3000:3000 \
      -e "GF_SECURITY_ADMIN_PASSWORD=${grafana_admin_password}" \
      -v grafana-data:/var/lib/grafana \
      --restart unless-stopped \
      grafana/grafana:10.0.3

  - sleep 10
  - docker ps -a
  - echo "Deployment completed successfully at $(date)"
