@using Syki.Front.Components.Custom
@using Front.Components.Ofertas

@page "/ofertas"
@attribute [Authorize(Roles = "Academic")]

<PageTitle>Ofertas</PageTitle>

<MudContainer>
    <SykiPageHeader Icon="@Icons.Material.Filled.PlaylistAddCheck" Title="Ofertas" ButtonText="Nova Oferta" OnClick="OpenDialog"/>

    <MudAlert Class="mt-4 mb-4 mx-6 pl-6" Severity="Severity.Normal" Variant="Variant.Text" Elevation="1">
        <MudText>Uma oferta de curso pode acontecer a cada período, com variações de campus e de turno.</MudText>
    </MudAlert>

    <MudContainer Class="mb-8">
        <MudDataGrid Class="pa-4" Items="@_ofertas" QuickFilter="@_quickFilter" Hover="true" Loading="_loading" Dense="true" RowsPerPage="10">
            <ToolBarContent>
                <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por qualquer atributo" />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Campus" Title="Campus" />
                <PropertyColumn Property="x => x.Periodo" Title="Período" />
                <PropertyColumn Property="x => x.Turno.GetDescription()" Title="Turno" />
                <PropertyColumn Property="x => x.Curso" Title="Curso" />
                <PropertyColumn Property="x => x.Grade" Title="Grade" />
            </Columns>

            <NoRecordsContent>
                @(GetNotFoundMessage())
            </NoRecordsContent>

            <PagerContent>
                <SykiDataGridPager T="OfertaOut" />
            </PagerContent>
        </MudDataGrid>
    </MudContainer>
</MudContainer>

@inject HttpClient Http
@inject IDialogService DialogService

@code
{
    private bool _loading;
    private string _searchString;
    private List<OfertaOut> _ofertas = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _ofertas = await Http.GetFromJsonAsync<List<OfertaOut>>("/ofertas") ?? [];
        _loading = false;
    }

    private Func<OfertaOut, bool> _quickFilter => x =>
        _searchString.IsIn(x.Campus, x.Periodo, x.Turno.GetDescription(), x.Curso, x.Grade);

    private async Task OpenDialog()
    {
        var options = new DialogOptions {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
        };
        var dialog = await DialogService.ShowAsync<NewOfertaDialog>("", options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        
        await OnInitializedAsync();
    }

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem ofertas cadastradas ainda." : "Nenhuma oferta encontrada.";
    }
}
