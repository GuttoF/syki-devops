@page "/cursos"
@attribute [Authorize(Roles = "Academico")]

<PageTitle>Cursos</PageTitle>

<MudContainer>
    <SykiPageHeader Icon="@Icons.Material.Filled.Class" Title="Cursos" ButtonText="Novo Curso" OnClick="OpenDialog"/>

    <MudAlert Class="mt-4 mb-4 mx-6 pl-6" Severity="Severity.Normal" Variant="Variant.Text">
        <MudText>Note que um mesmo curso pode ser ofertado em mais de um campus.</MudText>
    </MudAlert>

    <MudContainer Class="mb-8">
        <MudDataGrid
            Class="pa-4"
            Items="@_cursos"
            QuickFilter="@_quickFilter"
            Hover="true"
            Dense="true"
            Loading="_loading"
            RowsPerPage="10"
        >
            <ToolBarContent>
                <MudSpacer />
                <MudSpacer />
                <MudTextField
                    Margin="Margin.Dense"
                    Variant="Variant.Outlined"
                    @bind-Value="_searchString"
                    Placeholder="Busque por nome ou tipo"
                    Adornment="Adornment.Start"
                    Immediate="true"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    IconSize="Size.Medium"
                    Class="mt-0"
                />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Nome" Title="Nome" />
                <PropertyColumn Property="x => x.Tipo.GetDescription()" Title="Tipo" />
            </Columns>

            <NoRecordsContent>
                @(GetNotFoundMessage())
            </NoRecordsContent>

            <PagerContent>
                <MudDataGridPager T="CursoOut" RowsPerPageString="Linhas por página:" InfoFormat="{first_item}-{last_item} de {all_items}" />
            </PagerContent>
        </MudDataGrid>
    </MudContainer>
</MudContainer>

@inject HttpClient Http
@inject IDialogService DialogService

@code
{
    private bool _loading;
    private string _searchString;
    private List<CursoOut> _cursos = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _cursos = await Http.GetFromJsonAsync<List<CursoOut>>("/cursos") ?? [];
        _loading = false;
    }

    private Func<CursoOut, bool> _quickFilter => x => _searchString.IsIn(x.Nome, x.Tipo.GetDescription());

    private async Task OpenDialog()
    {
        var options = new DialogOptions {
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };
        var dialog = await DialogService.ShowAsync<NewCursoDialog>("", options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        
        await OnInitializedAsync();
    }

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem cursos cadastrados ainda." : "Nenhum curso encontrado.";
    }
}
