@using Syki.Front.Components.Custom
@using Syki.Front.Features.Academic.CreateCourseCurriculum

@namespace Syki.Front.Pages.Academic

@page "/grades"
@attribute [Authorize(Roles = "Academic")]

<PageTitle>Grades</PageTitle>

<MudContainer>
    <SykiPageHeader Icon="@Icons.Material.Filled.AccountTree" Title="Grades" ButtonText="Nova Grade" OnClick="OpenDialog"/>

    <MudAlert Class="mt-4 mb-4 mx-6 pl-6" Severity="Severity.Normal" Variant="Variant.Text" Elevation="1">
        <MudText>Um mesmo curso pode ter várias grades diferentes ao longo do tempo, com diferentes disciplinas.</MudText>
    </MudAlert>

    <MudContainer Class="mb-8">
        <MudDataGrid Class="pa-4" T="GradeOut" Items="@_grades" QuickFilter="@_quickFilter" Hover="true" Loading="@_loading" Dense="true" RowsPerPage="10">
            <ToolBarContent>
                <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque pelo name do curso ou da grade" />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Name" />
                <PropertyColumn Property="x => x.CursoNome" Title="Curso" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.RemoveRedEye" OnClick="@(() => OpenDisciplinasDialog(context.Item))" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>

            <NoRecordsContent>
                @(GetNotFoundMessage())
            </NoRecordsContent>

            <PagerContent>
                <SykiDataGridPager T="GradeOut" />
            </PagerContent>
        </MudDataGrid>
    </MudContainer>
</MudContainer>

@inject HttpClient Http
@inject IDialogService DialogService

@code
{
    private bool _loading;
    private string _searchString;
    private List<GradeOut> _grades = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _grades = await Http.GetFromJsonAsync<List<GradeOut>>("/grades") ?? [];
        _loading = false;
    }

    private async Task OpenDisciplinasDialog(GradeOut grade)
    {
        var parameters = new DialogParameters<DisciplinasDaGradeDialog>();
        parameters.Add(x => x.Disciplinas, grade.Disciplinas);

        var options = new DialogOptions {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };
        await DialogService.ShowAsync<DisciplinasDaGradeDialog>(grade.Name, parameters, options);
    }

    private Func<GradeOut, bool> _quickFilter => x => _searchString.IsIn(x.Name, x.CursoNome);

    private async Task OpenDialog()
    {
        var options = new DialogOptions {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };
        var dialog = await DialogService.ShowAsync<CreateGradeDialog>("", options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        
        await OnInitializedAsync();
    }

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem grades cadastradas ainda." : "Nenhuma grade encontrada.";
    }
}
