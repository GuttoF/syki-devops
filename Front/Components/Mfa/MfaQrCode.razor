<MudCard Class="mt-4 px-8 py-0" Elevation="0">
    <MudCardContent>
        <MudStack AlignItems="AlignItems.Center">
            <MudAlert Severity="Severity.Info" Variant="Variant.Text">
                <MudStack Row="true" Justify="Justify.SpaceAround">
                    <MudText>Utilize um app de autenticação para ler o QR-Code</MudText>
                </MudStack>
            </MudAlert>

            @if (_qrCodeLoading)
            {
                <MudCard Elevation="25" Class="ma-4 d-flex align-center justify-center" Style="width: 300px; height: 300px;">
                    <MudProgressCircular Color="Color.Dark" Indeterminate="true" Size="Size.Large" />
                </MudCard>
            }
            else
            {
                <MudImage Src="@(GetQrCodeImageSrc())" Width="300" Height="300" Elevation="25" Class="rounded-lg ma-4"/>
            }
        </MudStack>
    </MudCardContent>
</MudCard>

@using QRCoder
@inject IMfaService Mfa

@code
{
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private bool _qrCodeLoading;
    private Byte[] _codeBytes;

    protected override async Task OnInitializedAsync()
    {
        _qrCodeLoading = true;

        var result = await Mfa.GetMfaKey();

        if (result != null)
        {
            var email = await GetUserEmail();
            _codeBytes = GenerateQrCodeBytes(result.Key, email);
        }

        _qrCodeLoading = false;
    }

    private async Task<string> GetUserEmail()
    {
        var state = await AuthState;

        var claim = state.User.FindFirst("email");
        if (claim != null)
        {
            return claim.Value;
        }

        return "";
    }

    private string GetQrCodeImageSrc()
    {
        if (_codeBytes == null) return "";
        return string.Format("data:image/png;base64,{0}", Convert.ToBase64String(_codeBytes));
    }

    private  Byte[] GenerateQrCodeBytes(string key, string email)
    {
        const string provider = "Syki";

        using var qrGenerator = new QRCodeGenerator();
        using var qrCodeData = qrGenerator.CreateQrCode(
            $"otpauth://totp/{provider}:{email}?secret={key}&issuer={provider}",
            QRCodeGenerator.ECCLevel.Q
        );
        
        var qrCode = new PngByteQRCode(qrCodeData);

        return qrCode.GetGraphic(20);
    }
}
