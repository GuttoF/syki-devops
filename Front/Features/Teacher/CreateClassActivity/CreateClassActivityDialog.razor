@namespace Syki.Front.Features.Teacher.CreateClassActivity

<MudDialog Class="pb-2" @bind-Visible="@_visible" Options="@_options">
    <TitleContent>
        <SykiDialogTitle Text="Nova Atividade" />
    </TitleContent>
    <DialogContent>
        <MudForm @ref="@_form" Class="pt-1" Spacing="0">
            <MudGrid Spacing="2">
                <MudItem xs="12" sm="12" md="12" lg="12">
                    <SykiTextField Label="Título" AutoFocus="true" @bind-Value="@_title" />
                </MudItem>
                <MudItem xs="12" sm="12" md="12" lg="12">
                    <SykiTextField Label="Descrição" @bind-Value="@_description" AutoGrow="true" Lines="8" MaxLines="20" MaxLength="10000" />
                </MudItem>

                <MudItem xs="12" sm="6" md="6" lg="6">
                    <MudSelect
                        Dense="true"
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        T="ClassActivityType"
                        @bind-Value="@_type"
                        Label="Tipo"
                        Required="true"
                        RequiredError="Informe!"
                        AdornmentColor="Color.Primary"
                    >
                        @foreach (ClassActivityType type in Enum.GetValues<ClassActivityType>())
                        {
                            <MudSelectItem Value="@type">@type.GetDescription()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" sm="6" md="6" lg="6">
                    <MudNumericField
                        T="int"
                        @bind-Value="@_weight"
                        Max="100"
                        MaxLength="3"
                        Min="0"
                        HideSpinButtons="true"
                        Variant="Variant.Outlined"
                        Margin="Margin.Dense"
                        HelperText="Máx: 60"
                        Required="true"
                        Label="Peso"
                        RequiredError="Informe!"
                    />
                </MudItem>

                <MudItem xs="12" sm="6" md="6" lg="6">
                    <SykiDatePicker Label="Data de entrega" @bind-Date="@_dueDate" Editable="false" />
                </MudItem>
                <MudItem xs="12" sm="6" md="6" lg="6">
                    <MudSelect
                        Dense="true"
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        T="Hour"
                        @bind-Value="@_dueHour"
                        Label="Hora de entrega"
                        Required="true"
                        RequiredError="Informe!"
                        AdornmentColor="Color.Primary"
                    >
                        @foreach (Hour hour in Enum.GetValues<Hour>().Where(x => (int)x % 100 == 0))
                        {
                            <MudSelectItem Value="@hour">@hour.GetDescription()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <DialogCancelButton OnClick="@Close" />
        <SykiProgressCircular Loading="@_loading" />
        <DialogSaveButton OnClick="@Submit" />
    </DialogActions>
</MudDialog>

@inject ISnackbar Snackbar
@inject CreateClassActivityClient Client
@inject IBrowserViewportService BrowserViewportService

@code
{
    private MudForm _form;
    private bool _visible;
    private bool _loading;

    private string _title;
    private string _description;
    private ClassActivityType _type = ClassActivityType.Work;
    private int _weight;
    private DateTime? _dueDate = DateTime.Now.AddDays(7);
    private Hour _dueHour = Hour.H12_00;

    private readonly DialogOptions _options = new()
    {
        FullWidth = true,
        CloseButton = true,
        MaxWidth = MaxWidth.Medium,
    };

    [Parameter]
    public Guid ClassId { get; set; }
    
    [Parameter]
    public EventCallback AfterSubmit { get; set; }

    public async Task Open()
    {
        var breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
        _options.FullScreen = breakpoint == Breakpoint.Xs;
        _visible = true;
    }

    private void Close()
    {
        _visible = false;
    }

    private async Task Submit()
    {
        if (_loading) return;

        await _form.Validate();
        if (!_form.IsValid) return;

        _loading = true;

        var response = await Client.Create(ClassId, _title, _description, _type, _weight, _dueDate!.Value.ToDateOnly(), _dueHour);
        if (response.IsSuccess())
        {
            Snackbar.Add("Atividade criada com sucesso!", Severity.Success);
            await AfterSubmit.InvokeAsync();
            Close();
        }
        else
        {
            Snackbar.Add(response.GetError().Message, Severity.Error);
        }
        
        _loading = false;
    }
}
