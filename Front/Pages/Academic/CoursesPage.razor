@using Syki.Front.Components.Custom
@using Syki.Front.Features.Academic.CreateCourse

@namespace Syki.Front.Pages.Academic

@page "/cursos"
@attribute [Authorize(Roles = "Academic")]

<PageTitle>Cursos</PageTitle>

<MudContainer>
    <SykiPageHeader Icon="@Icons.Material.Filled.Class" Title="Cursos" ButtonText="Novo Curso" OnClick="@OpenDialog"/>
    <SykiPageAlert Text="Note que um mesmo curso pode ser ofertado em mais de um campus." />

    <MudContainer Class="mb-8">
        <MudDataGrid
            Class="pa-4"
            Items="@_cursos"
            QuickFilter="@_quickFilter"
            Hover="true"
            Dense="true"
            Loading="@_loading"
            RowsPerPage="10"
        >
            <ToolBarContent>
                <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por name ou tipo" />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Name" />
                <PropertyColumn Property="x => x.Type.GetDescription()" Title="Tipo" />
            </Columns>

            <NoRecordsContent>
                @(GetNotFoundMessage())
            </NoRecordsContent>

            <PagerContent>
                <SykiDataGridPager T="CourseOut" />
            </PagerContent>
        </MudDataGrid>
    </MudContainer>
</MudContainer>

@inject HttpClient Http
@inject IDialogService DialogService

@code
{
    private bool _loading;
    private string _searchString;
    private List<CourseOut> _cursos = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _cursos = await Http.GetFromJsonAsync<List<CourseOut>>("/cursos") ?? [];
        _loading = false;
    }

    private Func<CourseOut, bool> _quickFilter => x => _searchString.IsIn(x.Name, x.Type.GetDescription());

    private async Task OpenDialog()
    {
        var options = new DialogOptions {
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };
        var dialog = await DialogService.ShowAsync<NewCourseDialog>("", options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        
        await OnInitializedAsync();
    }

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem cursos cadastrados ainda." : "Nenhum curso encontrado.";
    }
}
