@inherits LayoutComponentBase

<MudSnackbarProvider />
<MudThemeProvider IsDarkMode="_isDark" />
<MudDialogProvider CloseOnEscapeKey="true" CloseButton="true" />

<AuthorizeView>
    <Authorized>
        <MudLayout>
            <MudAppBar Elevation="1" Dense="true">
                <HomeButton />
                <MudSpacer />
                <MudText>@_userName</MudText>
                <MudSpacer />
                <NotificationsIcon />
                <ConfigsIconButton />
                <ThemeIconButton @bind-IsDark="_isDark" OnClick="ChangeTheme" />
                <LogoutIconButton OnClick="Logout" />
            </MudAppBar>
            <MudDrawer Open="true" ClipMode="DrawerClipMode.Always" Elevation="2" Width="200px">
                <NavMenu />
            </MudDrawer>
            <MudMainContent>
                @Body
            </MudMainContent>
        </MudLayout>
    </Authorized>
    <NotAuthorized>
        @if (Nav.Uri.EndsWith("/") || Nav.Uri.ToLower().Contains("demo") || Nav.Uri.ToLower().Contains("login") || Nav.Uri.ToLower().Contains("reset-password"))
        {
            <MudAppBar Elevation="1" Dense="true">
                <MudStack Row="true" Class="d-flex justify-space-around flex-grow-1">
                    <HomeButton />
                    <MudSpacer />
                    <LoginButton />
                </MudStack>
            </MudAppBar>
            <MudMainContent>
                @Body
            </MudMainContent>
        }
        else
        {
            <SykiRedirect />
        }
    </NotAuthorized>
</AuthorizeView>

@inject NavigationManager Nav
@inject AuthService AuthService
@inject ILocalStorageService LocalStorage

@code
{
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private string _userName = "";
    private bool _isDark = false;

    protected override async Task OnInitializedAsync()
    {
        var isDark = await LocalStorage.GetItemAsync("IsDark");
        _isDark = isDark != null ? bool.Parse(isDark) : false;
        await SetUserName();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        await SetUserName();
    }

    private async Task SetUserName()
    {
        var state = await AuthState;

        var claim = state.User.FindFirst("name");
        if (claim != null)
        {
            _userName = claim.Value;
        }
    }

    private async Task ChangeTheme()
    {
        _isDark = !_isDark;
        await LocalStorage.SetItemAsync("IsDark", _isDark.ToString()); 
    }

    private async Task Logout()
    {
        await AuthService.Logout();
        Nav.NavigateTo("/");
    }
}
