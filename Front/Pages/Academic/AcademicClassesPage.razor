@using Syki.Front.Features.Academic.CreateClass

@namespace Syki.Front.Pages.Academic

@page "/academic/classes"
@attribute [Authorize(Roles = "Academic")]

<SykiPageTitle Title="Turmas" />

<MudContainer Class="my-4 px-4">
    <SykiPageHeader Icon="@Icons.Material.Filled.CenterFocusStrong" Title="Turmas" ButtonText="Nova Turma" OnClick="@OpenDialog"/>
    <SykiPageAlert Text="Em uma mesma turma podem estudar alunos de diferentes cursos." />
    <MudContainer Class="px-0 mb-4">
        <MudTable
            Items="@_classes"
            Class="pa-4"
            Dense="true"
            Hover="true"
            Filter="@_quickFilter"
            Loading="@_loading"
            RowsPerPage="10"
        >
            <ToolBarContent>
                <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por qualquer atributo"/>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Disciplina</MudTh>
                <MudTh>Professor</MudTh>
                <MudTh>Período</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Frequência</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Disciplina">@context.Discipline</MudTd>
                <MudTd DataLabel="Professor">@context.Teacher</MudTd>
                <MudTd DataLabel="Período">@context.Period</MudTd>
                <MudTd DataLabel="Status">@context.Status.GetDescription()</MudTd>
                <MudTd DataLabel="Frequência">
                    <MudProgressLinear Color="Color.Primary" Rounded="true" Size="Size.Large" Value="@decimal.ToDouble(context.Frequency)" Style="height: 24px">
                        <MudText Typo="Typo.body1">
                            <b>@context.Frequency.Format()%</b>
                        </MudText>
                    </MudProgressLinear>
                </MudTd>
                <MudTd>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.StickyNote2" OnClick="@(() => Action(context))"/>
                </MudTd>
            </RowTemplate>
            <LoadingContent>
                @if (_breakpoint == Breakpoint.Xs)
                {
                    <MudProgressLinear Color="Color.Info" Indeterminate="true" />
                }
            </LoadingContent>
            <NoRecordsContent>
                @(GetNotFoundMessage())
            </NoRecordsContent>
            <PagerContent>
                <SykiTablePager />
            </PagerContent>
        </MudTable>
    </MudContainer>
</MudContainer>

@inject NavigationManager Nav
@inject IDialogService DialogService
@inject GetClassesClient GetClassesClient
@inject IBrowserViewportService BrowserViewportService

@code
{
    private bool _loading;
    private string _searchString;
    private List<ClassOut> _classes = [];

    private Breakpoint _breakpoint;

    protected override async Task OnInitializedAsync()
    {
        _breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
        _loading = true;
        _classes = await GetClassesClient.Get();
        _loading = false;
    }

    private void Action(ClassOut item)
    {
        Nav.NavigateTo($"/academic/classes/{item.Id}");
    }

    private Func<ClassOut, bool> _quickFilter => x => _searchString.IsIn(x.Discipline, x.Teacher, x.Period);

    private async Task OpenDialog()
    {
        var breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
        var options = new DialogOptions {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            FullScreen = breakpoint == Breakpoint.Xs,
        };
        var dialog = await DialogService.ShowAsync<CreateClassDialog>("", options);

        var result = await dialog.Result;

        if (result!.Canceled) return;
        
        await OnInitializedAsync();
    }

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem turmas cadastradas ainda." : "Nenhuma turma encontrada.";
    }
}
