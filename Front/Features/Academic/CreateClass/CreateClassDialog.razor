@namespace Syki.Front.Features.Academic.CreateClass

<MudDialog @bind-Visible=@_visible Class="pb-2" Options="@_options">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-1 mb-n1" />
            Nova Turma
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="@_form" Class="pt-1">
            <MudGrid>
                <MudItem xs="9" Class="pb-2">
                    <MudAutocomplete
                        T="DisciplineOut"
                        MaxItems="50"
                        SearchFunc="@SearchDiscipline"
                        Dense="true"
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        @bind-Value="@_discipline"
                        Label="Disciplina"
                        Required="true"
                        RequiredError="Informe!"
                        AdornmentColor="Color.Primary"
                    />
                </MudItem>
                <MudItem xs="3" Class="pl-3">
                    <MudNumericField
                        MaxLength="2"
                        HideSpinButtons="true"
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        T="byte?"
                        @bind-Value="@_vacancies"
                        Label="Vagas"
                        Required="true"
                        RequiredError="Informe!"
                    />
                </MudItem>
                <MudItem xs="9" Class="py-0">
                    <MudSelect
                        Dense="true"
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        @bind-Value="@_teacher"
                        Label="Professor"
                        Required="true"
                        RequiredError="Informe!"
                        AdornmentColor="Color.Primary"
                    >
                        @foreach (TeacherOut? item in _teachers)
                        {
                            <MudSelectItem Value="@item">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="3" Class="pl-3 py-0">
                    <MudSelect
                        Dense="true"
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        @bind-Value="@_period"
                        Label="Período"
                        Required="true"
                        RequiredError="Informe!"
                        AdornmentColor="Color.Primary"
                    >
                        @foreach (string? item in _periods.ConvertAll(p => p.Id))
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" Class="pt-3 pb-0">
                    <MudDivider />
                </MudItem>

                <MudItem xs="12">
                    <MudContainer Class="px-0">
                        <MudGrid Justify="Justify.FlexStart">
                            <MudItem xs="12">
                                @foreach (var schedule in _schedules)
                                {
                                    <ClassSchedule Data="@schedule" OnDeleteClick="@DeleteSchedule" />
                                }
                                <MudButton
                                    Disabled="(GetNewScheduleDisabled())"
                                    StartIcon="@Icons.Material.Outlined.Add"
                                    IconSize="Size.Large"
                                    Variant="Variant.Outlined"
                                    FullWidth="true"
                                    Class="mt-2 border-dashed border-2 mud-border-secundary"
                                    Color="Color.Primary"
                                    @onclick="@NewSchedule"
                                >
                                    NOVO HORÁRIO
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudContainer>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <DialogCancelButton OnClick="@Close" />
        <SykiProgressCircular Loading="@_loading" />
        <DialogSaveButton OnClick="@Submit" />
    </DialogActions>
</MudDialog>

@inject ISnackbar Snackbar
@inject CreateClassClient CreateClassClient
@inject GetTeachersClient GetTeachersClient
@inject GetDisciplinesClient GetDisciplinesClient
@inject GetAcademicPeriodsClient GetAcademicPeriodsClient

@code
{
    [Parameter]
    public EventCallback<Guid> OnSuccess { get; set; }

    private MudForm _form;
    private bool _loading;
    private bool _visible;

    private DisciplineOut? _discipline;
    private TeacherOut? _teacher;
    private string? _period;
    private byte? _vacancies;
    private List<ScheduleInFillable> _schedules = [];

    private List<DisciplineOut> _disciplines = [];
    private List<TeacherOut> _teachers = [];
    private List<AcademicPeriodOut> _periods = [];

    private readonly DialogOptions _options = new()
    {
        FullWidth = true,
        CloseButton = true,
        MaxWidth = MaxWidth.Small,
    };

    protected override async Task OnInitializedAsync()
    {
        NewSchedule();
        await Task.WhenAll([
            Task.Run(async () => _teachers = await GetTeachersClient.Get()),
            Task.Run(async () => _periods = await GetAcademicPeriodsClient.Get()),
            Task.Run(async () => _disciplines = await GetDisciplinesClient.Get())
        ]);
    }

    public void Open()
    {
        _visible = true;
    }

    private void Close()
    {
        _visible = false;
    }
    
    bool GetNewScheduleDisabled()
    {
        return _schedules.Count == 3;
    }

    void NewSchedule()
    {
        _schedules.Add(new());
    }

    void DeleteSchedule(Guid id)
    {
        _schedules.Remove(_schedules.First(f => f.Id == id));
    }

    private async Task<IEnumerable<DisciplineOut>> SearchDiscipline(string value, CancellationToken cancellationToken)
    {
        await Task.Delay(0);

        if (string.IsNullOrEmpty(value))
            return _disciplines;

        return _disciplines.Where(x => value.IsIn(x.Name));
    }

    async Task Submit()
    {
        if (_loading) return;

        await _form.Validate();
        if (!_form.IsValid) return;

        var disciplineId = _discipline!.Id;
        var teacherId = _teacher!.Id;
        var period = _period!;
        var vacancies = _vacancies!.Value;
        var schedules = _schedules.ConvertAll(x => new ScheduleIn(x.Day!.Value, x.Start!.Value, x.End!.Value));

        _loading = true;
        var response = await CreateClassClient.Create(disciplineId, teacherId, period, vacancies, schedules);
        if (response.IsSuccess())
        {
            Snackbar.Add("Turma cadastrada com sucesso!", Severity.Success);
            await OnSuccess.InvokeAsync(response.GetSuccess().Id);
        }
        else
        {
            Snackbar.Add(response.GetError().Message, Severity.Error);
        }
        _loading = false;
    }
}
