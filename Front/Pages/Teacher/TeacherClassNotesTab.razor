@using Syki.Front.Features.Teacher.AddClassActivityNote

@namespace Syki.Front.Pages.Teacher

<MudContainer Class="mb-4 px-0">
    <MudDataGrid
        T="TeacherClassStudentOut"
        Class="pa-4"
        Items="@_students"
        QuickFilter="@_quickFilter"
        Hover="true"
        Dense="true"
        Loading="@_loading"
        RowsPerPage="100"
    >
        <ToolBarContent>
            <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por nome" />
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Name" Title="Nome" />
            <PropertyColumn Property="x => x.GetNote(ClassNoteType.N1)" Title="N1" />
            <PropertyColumn Property="x => x.GetNote(ClassNoteType.N2)" Title="N2" />
            <PropertyColumn Property="x => x.GetNote(ClassNoteType.N3)" Title="N3" />
            <PropertyColumn Property="x => x.AverageNote.Format()" Title="Média" />
        </Columns>
        <NoRecordsContent>
            @(GetNotFoundMessage())
        </NoRecordsContent>
        <PagerContent>
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@inject GetTeacherClassClient GetTeacherClassClient

@code
{
	[Parameter]
	public Guid ClassId { get; set; }

    private bool _loading;
    private string _searchString;
    private TeacherClassOut _class = new();
    private List<TeacherClassStudentOut> _students = [];

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        _loading = true;
        _class = await GetTeacherClassClient.Get(ClassId);
        _students = _class.Students.OrderBy(x => x.Name).ToList();
        _loading = false;
    }

    private Func<TeacherClassStudentOut, bool> _quickFilter => x => _searchString.IsIn(x.Name);

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem alunos matriculados ainda." : "Nenhum aluno encontrado.";
    }
}
