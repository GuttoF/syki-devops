@namespace Syki.Front.Pages.Academic

@page "/academic/classes/{id:guid}"
@attribute [Authorize(Roles = "Academic")]

<SykiPageTitle Title="Turma" />

<MudContainer Class="my-4 px-4">
    <MudCard Class="mt-8 mb-4 mx-4 px-2">
        <MudCardContent>
            <MudGrid Class="align-center">
                <MudItem xs="12" sm="9" md="9" lg="9">
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.CenterFocusStrong" Class="mr-1 mb-1" Size="Size.Large"/>
                        <MudText Typo="Typo.h5" Style="font-weight: bold">@($"{_class.Discipline} - {_class.Code}")</MudText>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" sm="3" md="3" lg="3" Class="d-flex justify-end">
                    <MudTabs Elevation="0" Rounded="true" Outlined="true" TabPanelClass="px-6" @bind-ActivePanelIndex="@_index" MinimumTabWidth="100%">
                        <MudTabPanel Text="Aulas" ID='"panel_0"'></MudTabPanel>
                        <MudTabPanel Text="Alunos" ID='"panel_1"'></MudTabPanel>
                    </MudTabs>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

    @if (_index == 0)
    {
        <MudPaper Class="mx-4 px-7 py-4 mb-4">
            <MudGrid Justify="Justify.FlexStart" Spacing="1">
                <MudItem xs="12" sm="6" md="6" lg="6">
                    <MudStack Spacing="1">
                        <MudText><strong>Professor:</strong> @_class.Teacher</MudText>
                        <MudText><strong>Status:</strong> @_class.Status.GetDescription()</MudText>
                        <MudText><strong>Alunos:</strong> @_class.FillRatio</MudText>
                        <MudText><strong>Horário:</strong> @_class.SchedulesInline</MudText>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" sm="6" md="6" lg="6">
                    <MudStack Spacing="1">
                        <MudText><strong>Período:</strong> @_class.Period</MudText>
                        <MudText><strong>Progresso:</strong> @_class.Progress</MudText>
                        <MudText><strong>Carga Horária:</strong> @_class.Workload</MudText>
                        <MudStack Row="true" AlignItems="AlignItems.Center">
                            <MudText><strong>Frequência:</strong></MudText>
                            @if (_class.Lessons.Any(x => x.Status == LessonStatus.Finalized))
                            {
                                <MudProgressLinear Color="Color.Primary" Rounded="true" Size="Size.Large" Value="@decimal.ToDouble(_class.Frequency)" Style="height: 24px">
                                    <MudText Typo="Typo.body1">
                                        <b>@_class.Frequency.Format()%</b>
                                    </MudText>
                                </MudProgressLinear>
                            }
                        </MudStack>
                    </MudStack>
                </MudItem>
                <MudItem>
                    <MudStack Spacing="1">
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudPaper>

        <MudContainer Class="px-4 mb-8">
            <MudTable
                Items="@GetLessons()"
                Class="pa-4"
                Dense="true"
                Hover="true"
                Filter="@_quickFilter"
                RowsPerPage="10"
            >
                <ToolBarContent>
                    <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por data, horário ou status" />
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Aula</MudTh>
                    <MudTh>Data</MudTh>
                    <MudTh>Horário</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Frequência</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Aula">@context.Number</MudTd>
                    <MudTd DataLabel="Data">@context.Date</MudTd>
                    <MudTd DataLabel="Horário">@context.Schedule</MudTd>
                    <MudTd DataLabel="Status">@context.Status.GetDescription()</MudTd>
                    <MudTd DataLabel="Frequência">
                        @if (context.Status == LessonStatus.Finalized)
                        {
                            <MudProgressLinear Color="Color.Primary" Rounded="true" Size="Size.Large" Value="@decimal.ToDouble(context.Frequency)" Style="height: 24px">
                                <MudText Typo="Typo.body1">
                                    <b>@context.Frequency.Format()%</b>
                                </MudText>
                            </MudProgressLinear>
                        }
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    @(GetNotFoundMessage())
                </NoRecordsContent>
                <PagerContent>
                    <SykiTablePager />
                </PagerContent>
            </MudTable>
        </MudContainer>
    }
    else
    {
        <MudContainer Class="px-4 mb-8">
            <MudTable
                Items="@_students"
                Class="pa-4"
                Hover="true"
                Loading="@_loading"
                Dense="true"
                RowsPerPage="10"
                Filter="@_quickFilterStudents"
            >
                <ToolBarContent>
                    <SykiDataGridSearchTextField @bind-Value="@_searchStringStudents" Placeholder="Busque por nome" />
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Nome</MudTh>
                    <MudTh>N1</MudTh>
                    <MudTh>N2</MudTh>
                    <MudTh>N3</MudTh>
                    <MudTh>Média</MudTh>
                    <MudTh>Frequência</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Nome">@context.Name</MudTd>
                    <MudTd DataLabel="N1">@context.GetNote(ExamType.N1)</MudTd>
                    <MudTd DataLabel="N2">@context.GetNote(ExamType.N2)</MudTd>
                    <MudTd DataLabel="N3">@context.GetNote(ExamType.N3)</MudTd>
                    <MudTd DataLabel="Média">@context.AverageNote.Format()</MudTd>
                    <MudTd DataLabel="Frequência">
                        @if (ShowFrequencyColumn())
                        {
                            <MudProgressLinear Color="Color.Primary" Rounded="true" Size="Size.Large" Value="@decimal.ToDouble(context.Frequency)" Style="height: 24px">
                                <MudText Typo="Typo.body1">
                                    <b>@context.Frequency.Format()%</b>
                                </MudText>
                            </MudProgressLinear>
                        }
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    @(GetStudentsNotFoundMessage())
                </NoRecordsContent>
                <PagerContent>
                    <SykiTablePager/>
                </PagerContent>
            </MudTable>
        </MudContainer>
    }
</MudContainer>

@inject CreateLessonsClient CreateLessonsClient
@inject GetAcademicClassClient GetAcademicClassClient

@code
{
	[Parameter]
	public Guid Id { get; set; }

    private int _index;
    private bool _loading;
    private string _searchString;
    private string _searchStringStudents;
    private GetAcademicClassOut _class = new();
    private List<AcademicClassStudentOut> _students = [];

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private bool ShowFrequencyColumn()
    {
        return _class.Lessons.Any(x => x.Status == LessonStatus.Finalized);
    }

    private async Task Load()
    {
        _loading = true;
        var response = await GetAcademicClassClient.Get(Id);
        if (response.IsSuccess())
        {
            _class = response.GetSuccess();
            _students = _class.Students.OrderBy(x => x.Name).ToList();
            if (_class.Lessons.Count == 0)
            {
                await CreateLessonsClient.Create(Id);
                await Load();
            }
        }
        _loading = false;
    }

    private IEnumerable<LessonOut> GetLessons()
    {
        return _class.Lessons.OrderBy(x => x.Number).ToList();
    }

    private Func<LessonOut, bool> _quickFilter => x => _searchString.IsIn(x.Date.ToShortDateString(), x.Schedule, x.Status.GetDescription());
    private Func<AcademicClassStudentOut, bool> _quickFilterStudents => x => _searchStringStudents.IsIn(x.Name);

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem aulas ainda." : "Nenhuma aula encontrada.";
    }

    private string GetStudentsNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem alunos matriculados ainda." : "Nenhum aluno encontrado.";
    }
}
