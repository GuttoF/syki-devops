@page "/alunos/disciplinas"
@attribute [Authorize(Roles = "Aluno")]

<PageTitle>Disciplinas</PageTitle>

<MudContainer>
    <MudCard Class="mt-8 mb-4 mx-6 px-2">
        <MudCardContent>
            <MudStack Row="true" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h5" Style="font-weight: bold" >Disciplinas</MudText>
            </MudStack>
        </MudCardContent>
    </MudCard>

    <MudContainer Class="mb-8">
        <MudDataGrid Class="pa-4" Items="@_disciplinas" QuickFilter="@_quickFilter" Hover="true">
            <ToolBarContent>
                <MudSpacer />
                <MudSpacer />
                <MudTextField
                    Margin="Margin.Dense"
                    Variant="Variant.Outlined"
                    @bind-Value="_searchString"
                    Placeholder="Busque por nome ou carga horária"
                    Adornment="Adornment.Start"
                    Immediate="true"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    IconSize="Size.Medium"
                    Class="mt-0"
                />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Nome" Title="Nome" />
                <PropertyColumn Property="x => x.CargaHoraria" Title="Carga Horária" />
            </Columns>
            <PagerContent>
                <MudDataGridPager T="DisciplinaOut" RowsPerPageString="Linhas por página:" InfoFormat="{first_item}-{last_item} de {all_items}" />
            </PagerContent>
        </MudDataGrid>
    </MudContainer>
</MudContainer>

@using Syki.Dtos
@inject HttpClient Http
@inject IDialogService DialogService

@code {
    private string _searchString;
    private List<DisciplinaOut> _disciplinas = new();

    protected override async Task OnInitializedAsync()
    {
        _disciplinas = await Http.GetFromJsonAsync<List<DisciplinaOut>>("alunos/disciplinas") ?? new();
    }

    private Func<DisciplinaOut, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Nome.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.CargaHoraria.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
}
