@using Front.Components.Custom
@using Front.Features.Academico.CreateAluno

@page "/alunos"
@attribute [Authorize(Roles = "Academico")]

<PageTitle>Alunos</PageTitle>

<MudContainer>
    <SykiPageHeader Icon="@Icons.Material.Filled.People" Title="Alunos" ButtonText="Novo Aluno" OnClick="OpenDialog"/>

    <MudAlert Class="mt-4 mb-4 mx-6 pl-6" Severity="Severity.Normal" Variant="Variant.Text" Elevation="1">
        <MudText>Um aluno precisa necessariamente estar vinculado à uma oferta de curso.</MudText>
    </MudAlert>

    <MudContainer Class="mb-8">
        <MudDataGrid Class="pa-4" Items="@_alunos" QuickFilter="@_quickFilter" Hover="true" Loading="_loading" Dense="true" RowsPerPage="10">
            <ToolBarContent>
                <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por nome ou matrícula" />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Nome" Title="Nome" />
                <PropertyColumn Property="x => x.Email" Title="Email" />
                <PropertyColumn Property="x => x.Matricula" Title="Matrícula" />
                <PropertyColumn Property="x => x.Oferta" Title="Oferta" />
            </Columns>

            <NoRecordsContent>
                @(GetNotFoundMessage())
            </NoRecordsContent>

            <PagerContent>
                <MudDataGridPager T="AlunoOut" RowsPerPageString="Linhas por página:" InfoFormat="{first_item}-{last_item} de {all_items}" />
            </PagerContent>
        </MudDataGrid>
    </MudContainer>
</MudContainer>

@inject HttpClient Http
@inject IDialogService DialogService

@code
{
    private bool _loading;
    private string _searchString;
    private List<AlunoOut> _alunos = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _alunos = await Http.GetFromJsonAsync<List<AlunoOut>>("/alunos") ?? [];
        _loading = false;
    }

    private Func<AlunoOut, bool> _quickFilter => x => _searchString.IsIn(x.Nome, x.Matricula);

    private async Task OpenDialog()
    {
        var options = new DialogOptions {
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };
        var dialog = await DialogService.ShowAsync<NewAlunoDialog>("", options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        
        await OnInitializedAsync();
    }

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem alunos cadastrados ainda." : "Nenhum aluno encontrado.";
    }
}
