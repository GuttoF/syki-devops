<MudDialog Class="pb-2">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-1 mb-n1" />
            Nova Disciplina
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form">
            <MudTextField
                OnlyValidateIfDirty="true"
                Immediate="true"
                Margin="Margin.Dense"
                Variant="Variant.Outlined"
                Class="mb-4"
                AutoFocus="true"
                @bind-Value="data.Nome"
                T="String"
                Label="Nome"
                Required="true"
                RequiredError="Informe o nome da disciplina!"
            />
            <MudNumericField
                T="ushort?"
                HideSpinButtons="true"
                OnlyValidateIfDirty="true"
                Margin="Margin.Dense"
                Variant="Variant.Outlined"
                Class="mb-4"
                @bind-Value="_cargaHoraria"
                Label="Carga Horária"
                Required="true"
                RequiredError="Informe a carga horária da disciplina!"
            />
            <MudSelect
                Dense="true"
                Margin="Margin.Dense"
                Variant="Variant.Outlined"
                Class="mb-2"
                T="CursoOut"
                Label="Cursos"
                MultiSelection="true"
                @bind-SelectedValues="SelectedCursos"
                AnchorOrigin="Origin.BottomCenter"
            >
                @foreach (var curso in Cursos)
                {
                    <MudSelectItem T="CursoOut" Value="@curso">@curso.Nome</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <DialogCancelButton OnClick="Cancel" />
        <MudSpacer />
        <DialogSaveButton OnClick="Submit" />
    </DialogActions>
</MudDialog>

@using Syki.Dtos
@inject HttpClient Http
@inject ISnackbar Snackbar

@code {
    MudForm _form;

    ushort? _cargaHoraria;
    DisciplinaIn data = new();

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    IEnumerable<CursoOut> SelectedCursos { get; set; } = new HashSet<CursoOut>() { };
    private List<CursoOut> Cursos = new();

    protected override async Task OnInitializedAsync()
    {
        Cursos = await Http.GetFromJsonAsync<List<CursoOut>>("/cursos") ?? new();
    }

    async Task Submit()
    {
        await _form.Validate();
        if (!_form.IsValid) return;

        data.CargaHoraria = _cargaHoraria!.Value;
        data.Cursos = SelectedCursos.ToList().ConvertAll(c => c.Id);

        await Http.PostAsJsonAsync("/disciplinas", data);

        MudDialog.Close(DialogResult.Ok(true));

        Snackbar.Add("Disciplina cadastrada com sucesso!", Severity.Success);
    }

    void Cancel() => MudDialog.Cancel();
}
