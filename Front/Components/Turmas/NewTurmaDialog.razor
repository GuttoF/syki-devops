<MudDialog Class="pb-2">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-1 mb-n1" />
            Nova Turma
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form">
            <MudGrid Justify="Justify.FlexStart">
                <MudItem xs="12">
                    <MudAutocomplete
                        T="OfertaOut"
                        MaxItems="50"
                        Class="py-0 my-0"
                        SearchFunc="@SearchOferta"
                        Dense="true"
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        AutoFocus="true"
                        @bind-Value="_oferta"
                        Label="Oferta"
                        Required="true"
                        RequiredError="Informe a oferta!"
                        AdornmentColor="Color.Primary"
                    />
                </MudItem>
                <MudItem xs="12">
                    <MudAutocomplete
                        T="DisciplinaOut"
                        MaxItems="50"
                        Class="py-0 my-0"
                        SearchFunc="@SearchDisciplina"
                        Dense="true"
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        @bind-Value="_disciplina"
                        Label="Disciplina"
                        Required="true"
                        RequiredError="Informe a disciplina!"
                        AdornmentColor="Color.Primary"
                    />
                </MudItem>
                <MudItem xs="8">
                        <MudSelect
                            Dense="true"
                            Margin="Margin.Dense"
                            Class="py-0 my-0"
                            Variant="Variant.Outlined"
                            @bind-Value="_professor"
                            Label="Professor"
                            Required="true"
                            RequiredError="Informe o professor!"
                            AdornmentColor="Color.Primary"
                        >
                        @foreach (ProfessorOut? item in Professores)
                        {
                            <MudSelectItem Value="@item">@item.Nome</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="4">
                    <MudSelect
                        Dense="true"
                        Margin="Margin.Dense"
                        Class="py-0 my-0"
                        Variant="Variant.Outlined"
                        @bind-Value="_periodo"
                        Label="Período"
                        Required="true"
                        RequiredError="Informe o período!"
                        AdornmentColor="Color.Primary"
                    >
                        @foreach (string? item in Periodos.ConvertAll(p => p.Id))
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="4">
                    <MudSelect
                        Dense="true"
                        Margin="Margin.Dense"
                        Class="py-0 my-0"
                        Variant="Variant.Outlined"
                        @bind-Value="_dia"
                        Label="Dia"
                        Required="true"
                        RequiredError="Informe o dia!"
                        AdornmentColor="Color.Primary"
                    >
                        @foreach (Dia? dia in Enum.GetValues(typeof(Dia)))
                        {
                            <MudSelectItem Value="@dia">@dia.GetDescription()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="4">
                    <MudSelect
                        Dense="true"
                        Margin="Margin.Dense"
                        Class="py-0 my-0"
                        Variant="Variant.Outlined"
                        @bind-Value="_start"
                        Label="Início"
                        Required="true"
                        RequiredError="Informe a hora de início!"
                        AdornmentColor="Color.Primary"
                    >
                        @foreach (Hora? hora in Enum.GetValues(typeof(Hora)))
                        {
                            <MudSelectItem Value="@hora">@hora.GetDescription()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="4">
                    <MudSelect
                        Dense="true"
                        Margin="Margin.Dense"
                        Class="py-0 my-0"
                        Variant="Variant.Outlined"
                        @bind-Value="_end"
                        Label="Fim"
                        Required="true"
                        RequiredError="Informe a hora de fim!"
                        AdornmentColor="Color.Primary"
                    >
                        @foreach (Hora? hora in Enum.GetValues(typeof(Hora)))
                        {
                            if (_start == null || hora <= _start) continue;
                            <MudSelectItem Value="@hora">@hora.GetDescription()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <DialogCancelButton OnClick="Cancel" />
        <MudSpacer />
        <DialogSaveButton OnClick="Submit" />
    </DialogActions>
</MudDialog>

@inject HttpClient Http
@inject ISnackbar Snackbar

@code
{
    MudForm _form;

    OfertaOut? _oferta;
    DisciplinaOut? _disciplina;
    ProfessorOut? _professor;
    string? _periodo;

    TurmaIn data = new();

    List<OfertaOut> Ofertas = [];
    List<DisciplinaOut> Disciplinas = [];
    List<ProfessorOut> Professores = [];
    List<PeriodoOut> Periodos = [];
    List<AlunoOut> Alunos = [];

    Dia? _dia;
    Hora? _start;
    Hora? _end;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(new Task[] { 
            Task.Run(async () => Professores = await Http.GetFromJsonAsync<List<ProfessorOut>>("/professores") ?? []),
            Task.Run(async () => Periodos = await Http.GetFromJsonAsync<List<PeriodoOut>>("/periodos") ?? []),
            Task.Run(async () => Alunos = await Http.GetFromJsonAsync<List<AlunoOut>>("/alunos") ?? []),
            Task.Run(async () => Ofertas = await Http.GetFromJsonAsync<List<OfertaOut>>("/ofertas") ?? []),
            Task.Run(async () => Disciplinas = await Http.GetFromJsonAsync<List<DisciplinaOut>>("/disciplinas") ?? []),
        });
    }

    private async Task<IEnumerable<OfertaOut>> SearchOferta(string value)
    {
        await Task.Delay(0);

        if (value.IsEmpty())
            return Ofertas;

        return Ofertas.Where(x => value.IsIn(x.Grade, x.Campus, x.Periodo, x.Turno.GetDescription()));
    }

    private async Task<IEnumerable<DisciplinaOut>> SearchDisciplina(string value)
    {
        await Task.Delay(0);

        if (string.IsNullOrEmpty(value))
            return Disciplinas;

        return Disciplinas.Where(x => value.IsIn(x.Nome));
    }

    async Task Submit()
    {
        await _form.Validate();
        if (!_form.IsValid) return;

        data = new()
        {
            OfertaId = _oferta!.Id,
            DisciplinaId = _disciplina!.Id,
            ProfessorId = _professor!.Id,
            Periodo = _periodo!,
            Dia = _dia!.Value,
            Start = _start!.Value,
            End = _end!.Value,
        };
        await Http.PostAsJsonAsync("/turmas", data);

        MudDialog.Close(DialogResult.Ok(true));

        Snackbar.Add("Turma cadastrada com sucesso!", Severity.Success);
    }

    void Cancel() => MudDialog.Cancel();
}
