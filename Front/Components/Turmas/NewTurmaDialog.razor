<MudDialog Class="pb-2">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-1 mb-n1" />
            Nova Turma
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form">
            <MudGrid>
                <MudItem xs="12" Class="pb-2">
                    <MudAutocomplete
                        T="DisciplinaOut"
                        MaxItems="50"
                        SearchFunc="@SearchDisciplina"
                        Dense="true"
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        @bind-Value="_disciplina"
                        Label="Disciplina"
                        Required="true"
                        RequiredError="Informe a disciplina!"
                        AdornmentColor="Color.Primary"
                    />
                </MudItem>
                <MudItem xs="8" Class="py-0">
                    <MudSelect
                        Dense="true"
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        @bind-Value="_professor"
                        Label="Professor"
                        Required="true"
                        RequiredError="Informe o professor!"
                        AdornmentColor="Color.Primary"
                    >
                        @foreach (ProfessorOut? item in Professores)
                        {
                            <MudSelectItem Value="@item">@item.Nome</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="4" Class="py-0">
                    <MudSelect
                        Dense="true"
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        @bind-Value="_periodo"
                        Label="Período"
                        Required="true"
                        RequiredError="Informe o período!"
                        AdornmentColor="Color.Primary"
                    >
                        @foreach (string? item in Periodos.ConvertAll(p => p.Id))
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" Class="pt-2 pb-0">
                    <MudDivider />
                </MudItem>

                <MudItem xs="12">
                    <MudContainer Class="px-0">
                        <MudGrid Justify="Justify.FlexStart">
                            <MudItem xs="12">
                                <CascadingValue Name="Horarios" Value="@Horarios">
                                    @for (var i = 0; i < _count; i++)
                                    {
                                        <TurmaHorario />
                                    }
                                </CascadingValue>
                                <MudButton
                                    StartIcon="@Icons.Material.Outlined.Add"
                                    IconSize="Size.Large"
                                    Variant="Variant.Outlined"
                                    FullWidth="true"
                                    Class="mt-2 border-dashed border-2 mud-border-secundary"
                                    Color="Color.Primary"
                                    @onclick="NewTurmaHorario"
                                >
                                    NOVO HORÁRIO
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudContainer>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <DialogCancelButton OnClick="Cancel" />
        <DialogProgressCircular Loading="_loading" />
        <DialogSaveButton OnClick="Submit" />
    </DialogActions>
</MudDialog>

@inject HttpClient Http
@inject ISnackbar Snackbar

@code
{
    MudForm _form;
    private bool _loading;

    DisciplinaOut? _disciplina;
    ProfessorOut? _professor;
    string? _periodo;

    TurmaIn data = new();

    List<DisciplinaOut> Disciplinas = [];
    List<ProfessorOut> Professores = [];
    List<PeriodoOut> Periodos = [];
    List<AlunoOut> Alunos = [];
    List<HorarioIn> Horarios { get; set; } = [];

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(new Task[] { 
            Task.Run(async () => Professores = await Http.GetFromJsonAsync<List<ProfessorOut>>("/professores") ?? []),
            Task.Run(async () => Periodos = await Http.GetFromJsonAsync<List<PeriodoOut>>("/periodos") ?? []),
            Task.Run(async () => Alunos = await Http.GetFromJsonAsync<List<AlunoOut>>("/alunos") ?? []),
            Task.Run(async () => Disciplinas = await Http.GetFromJsonAsync<List<DisciplinaOut>>("/disciplinas") ?? []),
        });
    }

    // TODO: criar botao para remover horario
    int _count = 1;
    void NewTurmaHorario()
    {
        _count ++;
    }

    private async Task<IEnumerable<DisciplinaOut>> SearchDisciplina(string value)
    {
        await Task.Delay(0);

        if (string.IsNullOrEmpty(value))
            return Disciplinas;

        return Disciplinas.Where(x => value.IsIn(x.Nome));
    }

    async Task Submit()
    {
        if (_loading) return;

        await _form.Validate();
        if (!_form.IsValid) return;

        data = new()
        {
            DisciplinaId = _disciplina!.Id,
            ProfessorId = _professor!.Id,
            Periodo = _periodo!,
            Horarios = Horarios,
        };

        _loading = true;
        var response = await Http.PostAsJsonAsync("/turmas", data);
        if (response.IsSuccessStatusCode)
        {
            MudDialog.Close(DialogResult.Ok(true));
            Snackbar.Add("Turma cadastrada com sucesso!", Severity.Success);
        }
        else
        {
            var error = await response.ToError();
            Snackbar.Add(error.Message, Severity.Error);
        }
        _loading = false;
    }

    void Cancel() => MudDialog.Cancel();
}
