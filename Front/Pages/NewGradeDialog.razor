<MudDialog>
    <DialogContent>
        <MudForm @ref="_form">
            <MudStack Row="true">
                <MudTextField Variant="Variant.Outlined" AutoFocus="true" @bind-Value="data.Nome" T="String" Label="Nome" Required="true" RequiredError="Informe o nome da grade!" />
                <MudSelect
                    Variant="Variant.Outlined"
                    Value="@_curso" ValueChanged="@((CursoOut newValue) => HandleSelectCurso(newValue))"
                    Label="Curso" Required="true" RequiredError="Informe o curso!" AdornmentColor="Color.Primary"
                >
                    @foreach (CursoOut? item in Cursos)
                    {
                        <MudSelectItem Value="@item">@item.Nome</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
            <MudContainer Class="mt-4 px-0">
                <MudGrid Justify="Justify.FlexStart">
                    <MudItem xs="12">
                        <CascadingValue Name="Disciplinas" Value="@Disciplinas">
                            <CascadingValue Name="Curso" Value="@_curso">
                                @for(var i=0; i<_count; i++)
                                {
                                    <GradeDisciplina/>
                                }
                            </CascadingValue>
                        </CascadingValue>
                        <MudButton
                            StartIcon="@Icons.Material.Outlined.Add"
                            IconSize="Size.Large"
                            Variant="Variant.Outlined"
                            FullWidth="true"
                            Class="mt-4 border-dashed border-2 mud-border-secundary"
                            Color="Color.Primary"
                            @onclick="NewGradeDisciplina"
                        >
                            New
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudContainer>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <DialogCancelButton OnClick="Cancel" />
        <DialogSaveButton OnClick="Submit" />
    </DialogActions>
</MudDialog>

@using Syki.Dtos
@using Front.Domain
@inject HttpClient Http
@inject ISnackbar Snackbar

@code {
    MudForm _form;

    CursoOut? _curso;

    int _count = 1;

    List<CursoOut> Cursos = new();
    List<GradeDisciplinaFull> Disciplinas = new();

    GradeIn data = new();

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Cursos = await Http.GetFromJsonAsync<List<CursoOut>>("/cursos") ?? new();
        Disciplinas = new();
    }

    void NewGradeDisciplina()
    {
        _count ++;
    }

    async Task HandleSelectCurso(CursoOut newValue)
    {
        _curso = newValue;
        var id = _curso!.Id;
        var disc = await Http.GetFromJsonAsync<List<DisciplinaOut>>($"/disciplinas?cursoId={id}") ?? new();
        Disciplinas = disc.ConvertAll(x => new GradeDisciplinaFull
        {
            Id = x.Id,
            Nome = x.Nome,
            CargaHoraria = x.CargaHoraria,
        });
    }

    async Task Submit()
    {
        await _form.Validate();
        if (!_form.IsValid) return;

        data.CursoId = _curso!.Id;
        data.Disciplinas = Disciplinas.Where(d => d.IsSelected).ToList()
            .ConvertAll(d => new GradeDisciplinaIn
            {  
                Id = d.Id,
                Periodo = d.Periodo!.Value,
                Creditos = d.Creditos!.Value,
                CargaHoraria = d.CargaHoraria!.Value,
            });

        await Http.PostAsJsonAsync("/grades", data);

        MudDialog.Close(DialogResult.Ok(true));

        Snackbar.Add("Grade cadastrada com sucesso!", Severity.Success);
    }

    void Cancel() => MudDialog.Cancel();
}
