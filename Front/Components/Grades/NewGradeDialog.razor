<MudDialog Class="pb-2">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-1 mb-n1" />
            Nova Grade
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form">
            <MudStack Row="true">
                <MudTextField
                    OnlyValidateIfDirty="true"
                    Immediate="true"
                    Margin="Margin.Dense"
                    Variant="Variant.Outlined"
                    AutoFocus="true"
                    @bind-Value="data.Nome"
                    T="String"
                    Label="Nome"
                    Required="true"
                    RequiredError="Informe o nome da grade!"
                />
                <MudSelect
                    Dense="true"
                    Margin="Margin.Dense"
                    Variant="Variant.Outlined"
                    Value="@_curso"
                    ValueChanged="@((CursoOut newValue) => HandleSelectCurso(newValue))"
                    Label="Curso"
                    Required="true"
                    RequiredError="Informe o curso!"
                    AdornmentColor="Color.Primary"
                >
                    @foreach (CursoOut? item in Cursos)
                    {
                        <MudSelectItem Value="@item">@item.Nome</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
            
            <MudDivider Class="my-4"/>

            <MudContainer Class="px-0">
                <MudGrid Justify="Justify.FlexStart">
                    <MudItem xs="12">
                        <CascadingValue Name="Disciplinas" Value="@Disciplinas">
                            <CascadingValue Name="Curso" Value="@_curso">
                                @for(var i=0; i<_count; i++)
                                {
                                    <GradeDisciplina />
                                }
                            </CascadingValue>
                        </CascadingValue>
                        <MudButton
                            StartIcon="@Icons.Material.Outlined.Add"
                            IconSize="Size.Large"
                            Variant="Variant.Outlined"
                            FullWidth="true"
                            Class="mt-2 border-dashed border-2 mud-border-secundary"
                            Color="Color.Primary"
                            @onclick="NewGradeDisciplina"
                        >
                            NOVA DISCIPLINA
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudContainer>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <DialogCancelButton OnClick="Cancel" />
        <DialogProgressCircular Loading="_loading" />
        <DialogSaveButton OnClick="Submit" />
    </DialogActions>
</MudDialog>

@inject HttpClient Http
@inject ISnackbar Snackbar

@code
{
    MudForm _form;
    private bool _loading;

    CursoOut? _curso;
    int _count = 1;

    List<CursoOut> Cursos = [];
    List<GradeDisciplinaFull> Disciplinas = [];

    GradeIn data = new();

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Cursos = await Http.GetFromJsonAsync<List<CursoOut>>("/cursos") ?? [];
        Disciplinas = [];
    }

    // TODO: adicionar botao para remover disciplina
    void NewGradeDisciplina()
    {
        _count ++;
    }

    async Task HandleSelectCurso(CursoOut newValue)
    {
        _curso = newValue;
        var id = _curso!.Id;
        var disc = await Http.GetFromJsonAsync<List<DisciplinaOut>>($"/disciplinas?cursoId={id}") ?? [];
        Disciplinas = disc.ConvertAll(x => new GradeDisciplinaFull
        {
            Id = x.Id,
            Nome = x.Nome,
            CargaHoraria = x.CargaHoraria,
        });
    }

    async Task Submit()
    {
        if (_loading) return;

        await _form.Validate();
        if (!_form.IsValid) return;

        data.CursoId = _curso!.Id;
        data.Disciplinas = Disciplinas.Where(d => d.IsSelected).ToList()
            .ConvertAll(d => new GradeDisciplinaIn
            (
                d.Id,
                d.Periodo!.Value,
                d.Creditos!.Value,
                d.CargaHoraria!.Value
            ));

        _loading = true;
        var response = await Http.PostAsJsonAsync("/grades", data);
        if (response.IsSuccessStatusCode)
        {
            MudDialog.Close(DialogResult.Ok(true));
            Snackbar.Add("Grade cadastrada com sucesso!", Severity.Success);
        }
        else
        {
            var error = await response.ToError();
            Snackbar.Add(error.Message, Severity.Error);
        }
        _loading = false;
    }

    void Cancel() => MudDialog.Cancel();
}
