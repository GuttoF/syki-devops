<MudDialog Class="pb-2">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-1 mb-n1" />
            Nova Turma
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form">
            <MudStack Row="true">
                <MudGrid Justify="Justify.FlexStart">
                    <MudItem xs="6">
                        <MudAutocomplete
                            T="DisciplinaOut"
                            MaxItems="50"
                            SearchFunc="@SearchDisciplina"
                            Dense="true"
                            Margin="Margin.Dense"
                            Variant="Variant.Outlined"
                            AutoFocus="true"
                            Value="_disciplina"
                            ValueChanged="@((DisciplinaOut newValue) => HandleSelectDisciplina(newValue))"
                            Label="Disciplina"
                            Required="true"
                            RequiredError="Informe a disciplina!"
                            AdornmentColor="Color.Primary"
                        />
                    </MudItem>
                    <MudItem xs="4">
                            <MudSelect Dense="true" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="_professor" Label="Professor" Required="true" RequiredError="Informe o professor!" AdornmentColor="Color.Primary">
                            @foreach (ProfessorOut? item in Professores)
                            {
                                <MudSelectItem Value="@item">@item.Nome</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="2">
                        <MudSelect Dense="true" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="_periodo" Label="Período" Required="true" RequiredError="Informe o período!" AdornmentColor="Color.Primary">
                            @foreach (string? item in Periodos)
                            {
                                <MudSelectItem Value="@item">@item</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudStack>
            <MudContainer Class="mt-4 px-0">
                <MudGrid Justify="Justify.FlexStart">
                    <MudItem xs="12">
                        <CascadingValue Name="Ofertas" Value="@Ofertas">
                            <CascadingValue Name="Disciplina" Value="@_disciplina">
                                @for(var i=0; i<_count; i++)
                                {
                                    <TurmaOferta />
                                }
                            </CascadingValue>
                        </CascadingValue>
                        <MudButton
                            StartIcon="@Icons.Material.Outlined.Add"
                            IconSize="Size.Large"
                            Variant="Variant.Outlined"
                            FullWidth="true"
                            Class="mt-4 border-dashed border-2 mud-border-secundary"
                            Color="Color.Primary"
                            @onclick="NewOferta"
                        >
                            New
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudContainer>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <DialogCancelButton OnClick="Cancel" />
        <MudSpacer />
        <DialogSaveButton OnClick="Submit" />
    </DialogActions>
</MudDialog>

@inject HttpClient Http
@inject ISnackbar Snackbar

@code {
    MudForm _form;

    DisciplinaOut? _disciplina;
    ProfessorOut? _professor;
    string? _periodo;

    int _count = 1;

    TurmaIn data = new();

    List<TurmaOfertaFull> Ofertas = new();
    List<DisciplinaOut> Disciplinas = new();
    List<ProfessorOut> Professores = new();
    List<string> Periodos = new();
    List<AlunoOut> Alunos = new();

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Professores = await Http.GetFromJsonAsync<List<ProfessorOut>>("/professores") ?? new();
        Periodos = await Http.GetFromJsonAsync<List<string>>("/periodos") ?? new();
        Alunos = await Http.GetFromJsonAsync<List<AlunoOut>>("/alunos") ?? new();
        Disciplinas = await Http.GetFromJsonAsync<List<DisciplinaOut>>("/disciplinas") ?? new();
    }

    private async Task<IEnumerable<DisciplinaOut>> SearchDisciplina(string value)
    {
        await Task.Delay(1);

        if (string.IsNullOrEmpty(value))
            return Disciplinas;

        return Disciplinas.Where(x => x.Nome.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    void NewOferta()
    {
        _count ++;
    }

    async Task HandleSelectDisciplina(DisciplinaOut newValue)
    {
        _disciplina = newValue;
        var id = _disciplina.Id.ToString();
        var ofertaOuts = await Http.GetFromJsonAsync<List<OfertaOut>>($"/ofertas?disciplinaId={id}") ?? new();
        Ofertas = ofertaOuts.ConvertAll(x =>
            new TurmaOfertaFull
            {
                Id = x.Id,
                Campus = x.Campus,
                Curso = x.Curso,
                Grade = x.Grade,
                Periodo = x.Periodo,
                Turno = x.Turno,
            }
        );
    }

    async Task Submit()
    {
        await _form.Validate();
        if (!_form.IsValid) return;

        data = new()
        {
            Ofertas = Ofertas.Where(x => x.IsSelected).ToList().ConvertAll(x => x.Id),
            DisciplinaId = _disciplina!.Id,
            ProfessorId = _professor!.Id,
            Periodo = _periodo!,
        };
        await Http.PostAsJsonAsync("/turmas", data);

        MudDialog.Close(DialogResult.Ok(true));

        Snackbar.Add("Turma cadastrada com sucesso!", Severity.Success);
    }

    void Cancel() => MudDialog.Cancel();
}
