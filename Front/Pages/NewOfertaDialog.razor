<MudDialog>
    <DialogContent>
        <MudForm>
            <MudSelect @bind-Value="_campus" Label="Campus" Required="true" RequiredError="Informe o campus!" AdornmentColor="Color.Primary">
                @foreach (CampusOut? item in Campi)
                {
                    <MudSelectItem Value="@item">@item.Nome</MudSelectItem>
                }
            </MudSelect>
            <MudSelect @bind-Value="_curso" Label="Curso" Required="true" RequiredError="Informe o curso!" AdornmentColor="Color.Primary">
                @foreach (CursoOut? item in Cursos)
                {
                    <MudSelectItem Value="@item">@item.Nome</MudSelectItem>
                }
            </MudSelect>
            <MudSelect @bind-Value="_grade" Label="Grade" Required="true" RequiredError="Informe a grade!" AdornmentColor="Color.Primary">
                @foreach (GradeOut? item in Grades)
                {
                    <MudSelectItem Value="@item">@item.Nome</MudSelectItem>
                }
            </MudSelect>
            <MudSelect @bind-Value="_periodoId" Label="Período" Required="true" RequiredError="Informe o período do curso!" AdornmentColor="Color.Primary">
                @foreach (string? item in Periodos)
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>
            <MudSelect @bind-Value="_turno" Label="Turno" Required="true" RequiredError="Informe o turno do curso!" AdornmentColor="Color.Primary">
                @foreach (Turno? item in Enum.GetValues(typeof(Turno)))
                {
                    <MudSelectItem Value="@item">@item.GetDescription()</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Salvar</MudButton>
    </DialogActions>
</MudDialog>

@using Syki.Dtos
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject HttpClient httpClient

@code {
    private CampusOut? _campus;
    private CursoOut? _curso;
    private GradeOut? _grade;
    private string? _periodoId;
    private Turno? _turno;

    private OfertaIn data = new();

    List<CampusOut> Campi = new()
    {
        new CampusOut { Id = 1, Nome = "Caruaru" },
        new CampusOut { Id = 2, Nome = "Recife" },
        new CampusOut { Id = 3, Nome = "Garanhuns" },
    };

    List<CursoOut> Cursos = new()
    {
        new CursoOut { Id = 1, Nome = "Administração" },
        new CursoOut { Id = 2, Nome = "Análise e Desenvolvimento de Sistemas" },
        new CursoOut { Id = 3, Nome = "Arquitetura e Urbanismo" },
        new CursoOut { Id = 4, Nome = "Ciência da Computação" },
    };

    List<GradeOut> Grades = new()
    {
        new GradeOut { Id = 1, Nome = "Grade de ADS" },
        new GradeOut { Id = 2, Nome = "Grade de Direito" },
    };

    List<string> Periodos = new()
    {
        "2020.1", "2020.2", "2021.1", "2021.2",
    };

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    async Task Submit()
    {
        data = new()
        {
            CampusId = _campus!.Id,
            CursoId = _curso!.Id,
            GradeId = _grade!.Id,
            PeriodoId = _periodoId!,
            Turno = _turno!.Value,
        };
        await httpClient.PostAsJsonAsync("/ofertas", data);

        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();
}
