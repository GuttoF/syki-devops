<MudDialog>
    <DialogContent>
        <MudForm @ref="_form">
            <MudSelect Variant="Variant.Outlined" Class="mb-2" AutoFocus="true" @bind-Value="_campus" Label="Campus" Required="true" RequiredError="Informe o campus!" AdornmentColor="Color.Primary">
                @foreach (CampusOut? item in Campi)
                {
                    <MudSelectItem Value="@item">@item.Nome</MudSelectItem>
                }
            </MudSelect>
            <MudSelect Variant="Variant.Outlined" Class="mb-2" @bind-Value="_curso" Label="Curso" Required="true" RequiredError="Informe o curso!" AdornmentColor="Color.Primary">
                @foreach (CursoOut? item in Cursos)
                {
                    <MudSelectItem Value="@item">@item.Nome</MudSelectItem>
                }
            </MudSelect>
            <MudSelect Variant="Variant.Outlined" Class="mb-2" @bind-Value="_grade" Label="Grade" Required="true" RequiredError="Informe a grade!" AdornmentColor="Color.Primary">
                @if(_curso == null)
                {
                    <MudSelectItem Value="@_grade" Disabled="true">Selecione o curso!</MudSelectItem>
                }
                @if(_curso != null && Grades.Where(x => x.CursoId == _curso.Id).Count() == 0)
                {
                    <MudSelectItem Value="@_grade" Disabled="true">Este curso não possui grades vinculadas.</MudSelectItem>
                }
                @if(_curso != null)
                {
                    @foreach (GradeOut? item in Grades.Where(x => x.CursoId == _curso.Id))
                    {
                        <MudSelectItem Value="@item">@item.Nome</MudSelectItem>
                    }
                }
            </MudSelect>
            <MudSelect Variant="Variant.Outlined" Class="mb-2" @bind-Value="_periodo" Label="Período" Required="true" RequiredError="Informe o período do curso!" AdornmentColor="Color.Primary">
                @foreach (string? item in Periodos)
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>
            <MudSelect Variant="Variant.Outlined" Class="mb-2" @bind-Value="_turno" Label="Turno" Required="true" RequiredError="Informe o turno do curso!" AdornmentColor="Color.Primary">
                @foreach (Turno? item in Enum.GetValues(typeof(Turno)))
                {
                    <MudSelectItem Value="@item">@item.GetDescription()</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <DialogCancelButton OnClick="Cancel" />
        <DialogSaveButton OnClick="Submit" />
    </DialogActions>
</MudDialog>

@using Syki.Dtos
@inject HttpClient Http
@inject ISnackbar Snackbar

@code {
    MudForm _form;

    CampusOut? _campus;
    CursoOut? _curso;
    GradeOut? _grade;
    string? _periodo;
    Turno? _turno;

    OfertaIn data = new();

    List<CampusOut> Campi = new();
    List<CursoOut> Cursos = new();
    List<GradeOut> Grades = new();
    List<string> Periodos = new();

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Campi = await Http.GetFromJsonAsync<List<CampusOut>>("/campi") ?? new();
        Cursos = await Http.GetFromJsonAsync<List<CursoOut>>("/cursos") ?? new();
        Grades = await Http.GetFromJsonAsync<List<GradeOut>>("/grades") ?? new();
        Periodos = await Http.GetFromJsonAsync<List<string>>("/periodos") ?? new();
    }

    async Task Submit()
    {
        await _form.Validate();
        if (!_form.IsValid) return;

        data = new()
        {
            CampusId = _campus!.Id,
            CursoId = _curso!.Id,
            GradeId = _grade!.Id,
            Periodo = _periodo!,
            Turno = _turno!.Value,
        };
        await Http.PostAsJsonAsync("/ofertas", data);

        MudDialog.Close(DialogResult.Ok(true));

        Snackbar.Add("Oferta cadastrada com sucesso!", Severity.Success);
    }

    void Cancel() => MudDialog.Cancel();
}
