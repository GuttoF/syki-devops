<MudDialog Class="pb-2">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-1 mb-n1" />
            Nova Oferta
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form">
            <MudGrid Justify="Justify.FlexStart" Spacing="2">
                <MudItem xs="5">
                    <MudSelect
                        Dense="true"
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        Class="mb-4"
                        AutoFocus="true"
                        @bind-Value="_campus"
                        Label="Campus"
                        Required="true"
                        RequiredError="Informe!"
                        AdornmentColor="Color.Primary"
                    >
                        @foreach (CampusOut? item in Campi)
                        {
                            <MudSelectItem Value="@item">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="3">
                    <MudSelect
                        Dense="true"
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        Class="mb-4"
                        @bind-Value="_periodo"
                        Label="Período"
                        Required="true"
                        RequiredError="Informe!"
                        AdornmentColor="Color.Primary"
                    >
                        @foreach (string? item in Periodos.ConvertAll(p => p.Id))
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="4">
                    <MudSelect
                        Dense="true"
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        Class="mb-4"
                        @bind-Value="_turno"
                        Label="Turno"
                        Required="true"
                        RequiredError="Informe!"
                        AdornmentColor="Color.Primary"
                    >
                        @foreach (Turno? item in Enum.GetValues<Turno>())
                        {
                            <MudSelectItem Value="@item">@item.GetDescription()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
            <MudAutocomplete
                T="CursoOut"
                MaxItems="50"
                SearchFunc="@SearchCurso"
                Dense="true"
                Margin="Margin.Dense"
                Variant="Variant.Outlined"
                Class="mb-4"
                @bind-Value="_curso"
                Label="Curso"
                Required="true"
                RequiredError="Informe!"
                AdornmentColor="Color.Primary"
            />

            <MudSelect
                Dense="true"
                Margin="Margin.Dense"
                Variant="Variant.Outlined"
                Class="mb-2"
                @bind-Value="_grade"
                Label="Grade"
                Required="true"
                RequiredError="Informe!"
                AdornmentColor="Color.Primary"
            >
                @if (_curso == null)
                {
                    <MudSelectItem Value="@_grade" Disabled="true">Selecione o curso!</MudSelectItem>
                }
                @if (_curso != null && Grades.Where(x => x.CursoId == _curso.Id).Count() == 0)
                {
                    <MudSelectItem Value="@_grade" Disabled="true">Este curso não possui grades vinculadas.</MudSelectItem>
                }
                @if (_curso != null)
                {
                    @foreach (GradeOut? item in Grades.Where(x => x.CursoId == _curso.Id))
                    {
                        <MudSelectItem Value="@item">@item.Nome</MudSelectItem>
                    }
                }
            </MudSelect>

        </MudForm>
    </DialogContent>
    <DialogActions>
        <DialogCancelButton OnClick="Cancel" />
        <DialogProgressCircular Loading="_loading" />
        <DialogSaveButton OnClick="Submit" />
    </DialogActions>
</MudDialog>

@inject HttpClient Http
@inject ISnackbar Snackbar

@code
{
    MudForm _form;
    private bool _loading;

    CampusOut? _campus;
    CursoOut? _curso;
    GradeOut? _grade;
    string? _periodo;
    Turno? _turno;

    OfertaIn data = new();

    List<CampusOut> Campi = [];
    List<CursoOut> Cursos = [];
    List<GradeOut> Grades = [];
    List<PeriodoOut> Periodos = [];

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(new Task[] { 
            Task.Run(async () => Campi = await Http.GetFromJsonAsync<List<CampusOut>>("/campi") ?? []),
            Task.Run(async () => Cursos = await Http.GetFromJsonAsync<List<CursoOut>>("/cursos") ?? []),
            Task.Run(async () => Grades = await Http.GetFromJsonAsync<List<GradeOut>>("/grades") ?? []),
            Task.Run(async () => Periodos = await Http.GetFromJsonAsync<List<PeriodoOut>>("/periodos") ?? []),
        });
    }

    private async Task<IEnumerable<CursoOut>> SearchCurso(string value)
    {
        await Task.Delay(0);

        if (string.IsNullOrEmpty(value))
            return Cursos;

        return Cursos.Where(x => x.Nome.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    async Task Submit()
    {
        if (_loading) return;

        await _form.Validate();
        if (!_form.IsValid) return;

        data = new()
        {
            CampusId = _campus!.Id,
            CursoId = _curso!.Id,
            GradeId = _grade!.Id,
            Periodo = _periodo!,
            Turno = _turno!.Value,
        };

        _loading = true;
        var response = await Http.PostAsJsonAsync("/ofertas", data);
        if (response.IsSuccessStatusCode)
        {
            MudDialog.Close(DialogResult.Ok(true));
            Snackbar.Add("Oferta cadastrada com sucesso!", Severity.Success);
        }
        else
        {
            var error = await response.ToError();
            Snackbar.Add(error.Message, Severity.Error);
        }
        _loading = false;
    }

    void Cancel() => MudDialog.Cancel();
}
