@page "/campi"
@attribute [Authorize(Roles = "Academico")]

<PageTitle>Campi</PageTitle>

<MudContainer>
    <SykiPageHeader Icon="@Icons.Material.Filled.GroupWork" Title="Campi" ButtonText="Novo Campus" OnClick="OpenDialog"/>

    <MudAlert Class="mt-4 mb-4 mx-6 pl-6" Severity="Severity.Normal" Variant="Variant.Text">
        <MudText>Você pode escolher um dos campus abaixo para que o sistema filtre informações apenas relacionadas à ele.</MudText>
    </MudAlert>

    <MudContainer Class="mb-8">
        <MudDataGrid
            T="CampusOut"
            Class="pa-4"
            Items="@_campi"
            QuickFilter="@_quickFilter"
            Dense="true"
            Hover="true"
            ReadOnly="true"
            Loading="_loading"
            RowsPerPage="10"
        >
            <ToolBarContent>
                <MudSpacer />
                <MudSpacer />
                <MudTextField
                    Margin="Margin.Dense"
                    Variant="Variant.Outlined"
                    @bind-Value="_searchString"
                    Placeholder="Busque por nome ou cidade"
                    Adornment="Adornment.Start"
                    Immediate="true"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    IconSize="Size.Medium"
                    Class="mt-0"
                />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Nome" Title="Nome" />
                <PropertyColumn Property="x => x.Cidade" Title="Cidade" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => OpenEditDialog(context.Item))" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
 
            <NoRecordsContent>
                @(GetNotFoundMessage())
            </NoRecordsContent>

            <PagerContent>
                <MudDataGridPager T="CampusOut" RowsPerPageString="Linhas por página:" InfoFormat="{first_item}-{last_item} de {all_items}" />
            </PagerContent>
        </MudDataGrid>
    </MudContainer>
</MudContainer>

@inject HttpClient Http
@inject IDialogService DialogService

@code
{
    private bool _loading;
    private string _searchString;
    private List<CampusOut> _campi = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _campi = await Http.GetFromJsonAsync<List<CampusOut>>("/campi") ?? [];
        _loading = false;
    }

    private Func<CampusOut, bool> _quickFilter => x => _searchString.IsIn(x.Nome, x.Cidade);

    private async Task OpenDialog()
    {
        var options = new DialogOptions {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
        };
        var dialog = await DialogService.ShowAsync<NewCampusDialog>("", options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        
        await OnInitializedAsync();
    }

    private async Task OpenEditDialog(CampusOut item)
    {
        var parameters = new DialogParameters<EditCampusDialog>();
        parameters.Add(x => x.Campus, item);

        var options = new DialogOptions {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
        };
        var dialog = await DialogService.ShowAsync<EditCampusDialog>("", parameters, options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        
        await OnInitializedAsync();
    }

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem campus cadastrados ainda." : "Nenhum campus encontrado.";
    }
}
