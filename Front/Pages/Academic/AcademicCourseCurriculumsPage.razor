@using Syki.Front.Components.Custom
@using Syki.Front.Features.Academic.CreateCourseCurriculum

@namespace Syki.Front.Pages.Academic

@page "/academic/course-curriculums"
@attribute [Authorize(Roles = "Academic")]

<PageTitle>Grades</PageTitle>

<MudContainer>
    <SykiPageHeader Icon="@Icons.Material.Filled.AccountTree" Title="Grades" ButtonText="Nova Grade" OnClick="@OpenDialog"/>
    <SykiPageAlert Text="Um mesmo curso pode ter várias grades diferentes ao longo do tempo, com diferentes disciplinas." />
    <MudContainer Class="mb-8">
        <MudDataGrid Class="pa-4" T="CourseCurriculumOut" Items="@_grades" QuickFilter="@_quickFilter" Hover="true" Loading="@_loading" Dense="true" RowsPerPage="10">
            <ToolBarContent>
                <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque pelo nome do curso ou da grade" />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Nome" />
                <PropertyColumn Property="x => x.CourseName" Title="Curso" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.RemoveRedEye" OnClick="@(() => OpenDisciplinesDialog(context.Item))" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <NoRecordsContent>
                @(GetNotFoundMessage())
            </NoRecordsContent>
            <PagerContent>
                <SykiDataGridPager T="CourseCurriculumOut" />
            </PagerContent>
        </MudDataGrid>
    </MudContainer>
</MudContainer>

@inject IDialogService DialogService
@inject GetCourseCurriculumsClient Client

@code
{
    private bool _loading;
    private string _searchString;
    private List<CourseCurriculumOut> _grades = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _grades = await Client.Get();
        _loading = false;
    }

    private async Task OpenDisciplinesDialog(CourseCurriculumOut grade)
    {
        var parameters = new DialogParameters<CourseCurriculumDisciplinesDialog>();
        parameters.Add(x => x.Disciplines, grade.Disciplines);

        var options = new DialogOptions {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };
        await DialogService.ShowAsync<CourseCurriculumDisciplinesDialog>(grade.Name, parameters, options);
    }

    private Func<CourseCurriculumOut, bool> _quickFilter => x => _searchString.IsIn(x.Name, x.CourseName);

    private async Task OpenDialog()
    {
        var options = new DialogOptions {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };
        var dialog = await DialogService.ShowAsync<CreateCourseCurriculumDialog>("", options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        
        await OnInitializedAsync();
    }

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem grades cadastradas ainda." : "Nenhuma grade encontrada.";
    }
}
