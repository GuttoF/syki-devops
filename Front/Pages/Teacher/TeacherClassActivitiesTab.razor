@using Syki.Front.Features.Teacher.CreateClassActivity

@namespace Syki.Front.Pages.Teacher

<MudContainer Class="mb-4 px-0">
    <SykiPageHeader Icon="@Icons.Material.Filled.EditNote" Title="Atividades" ButtonText="Nova Atividade" OnClick="@NewActivity" />

    <style>.mud-table-toolbar { height: auto }</style>
    <MudDataGrid
        T="TeacherClassActivityOut"
        Class="pa-4 mt-4"
        Items="@GetActivities()"
        QuickFilter="@_quickFilter"
        Hover="true"
        Dense="true"
        Loading="@_loading"
        RowsPerPage="100"
    >
        <ToolBarContent>
            <MudGrid Class="align-center" Spacing="3">
                <MudItem xs="12" sm="3" md="3" lg="3">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                        <MudSelect
                            Dense="true"
                            Margin="Margin.Dense"
                            Variant="Variant.Outlined"
                            AdornmentColor="Color.Primary"
                            @bind-Value="@_noteFilter"
                            Label="Nota"
                            Clearable="true"
                        >
                            @foreach (ClassNoteType? type in Enum.GetValues<ClassNoteType>())
                            {
                                <MudSelectItem Value="@type">@type.GetDescription()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" sm="9" md="9" lg="9" Class="d-flex justify-end">
                    <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por título" />
                </MudItem>
            </MudGrid>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Title" Title="Título" />
            <PropertyColumn Property="x => x.Type.GetDescription()" Title="Tipo" />
            <PropertyColumn Property="x => x.Note.GetDescription()" Title="Nota" />
            <PropertyColumn Property="x => x.Weight" Title="Peso (%)" />
            <PropertyColumn Property="x => x.GetDueDate()" Title="Data de entrega" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.RemoveRedEye" OnClick="@(() => GoToDetails(context.Item.Id))" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <NoRecordsContent>
            @(GetNotFoundMessage())
        </NoRecordsContent>
        <PagerContent>
        </PagerContent>
    </MudDataGrid>
</MudContainer>

<CreateClassActivityDialog @ref="@_dialog" ClassId="@ClassId" AfterSubmit="@Load" />

@inject NavigationManager Nav
@inject GetTeacherClassActivitiesClient GetTeacherClassActivitiesClient

@code
{
	[Parameter]
	public Guid ClassId { get; set; }

    private CreateClassActivityDialog _dialog;

    private ClassNoteType? _noteFilter = null;

    private bool _loading;
    private string _searchString;
    private List<TeacherClassActivityOut> _activities = [];

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        _loading = true;
        var response = await GetTeacherClassActivitiesClient.Get(ClassId);
        if (response.IsSuccess())
        {
            _activities = response.GetSuccess();
        }
        _loading = false;
    }

    private List<TeacherClassActivityOut> GetActivities()
    {
        return _activities.Where(x => _noteFilter == null || x.Note == _noteFilter).ToList();
    }

    private void GoToDetails(Guid activityId)
    {
        Nav.NavigateTo($"/teacher/classes/{ClassId}/activities/{activityId}");
    }

    private async Task NewActivity()
    {
        await _dialog.Open();
    }

    private Func<TeacherClassActivityOut, bool> _quickFilter => x => _searchString.IsIn(x.Title, x.Description);
    private string GetNotFoundMessage()
    {
        return _searchString.IsEmpty() ? "Não existem atividades ainda." : "Nenhuma atividade encontrada.";
    }
}
