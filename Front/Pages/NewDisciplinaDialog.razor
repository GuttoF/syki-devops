<MudDialog>
    <DialogContent>
        <MudForm @ref="form">
            <MudTextField AutoFocus="true" @bind-Value="data.Nome" T="String" Label="Nome" Required="true" RequiredError="Informe o nome da disciplina!" />
            <MudTextField @bind-Value="_cargaHoraria" Label="Carga Horária" Required="true" RequiredError="Informe a carga horária da disciplina!" />
            <MudSelect T="CursoOut" Label="Cursos" MultiSelection="true" @bind-SelectedValues="SelectedCursos" AnchorOrigin="Origin.BottomCenter">
                @foreach (var curso in Cursos)
                {
                    <MudSelectItem T="CursoOut" Value="@curso">@curso.Nome</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Salvar</MudButton>
    </DialogActions>
</MudDialog>

@using Syki.Dtos
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject HttpClient httpClient
@inject ISnackbar Snackbar

@code {
    MudForm form;
    ushort? _cargaHoraria;
    DisciplinaIn data = new();

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    IEnumerable<CursoOut> SelectedCursos { get; set; } = new HashSet<CursoOut>() { };
    private List<CursoOut> Cursos = new();

    protected override async Task OnInitializedAsync()
    {
        Cursos = await httpClient.GetFromJsonAsync<List<CursoOut>>("/cursos") ?? new();
    }

    async Task Submit()
    {
        await form.Validate();
        if (!form.IsValid) return;

        data.CargaHoraria = _cargaHoraria!.Value;

        await httpClient.PostAsJsonAsync("/disciplinas", data);

        MudDialog.Close(DialogResult.Ok(true));

        Snackbar.Add("Disciplina cadastrada com sucesso!", Severity.Success);
    }

    void Cancel() => MudDialog.Cancel();
}
