@using Syki.Front.Features.Academic.CreateTeacher

@namespace Syki.Front.Pages.Academic

@page "/academic/teachers"
@attribute [Authorize(Roles = "Academic")]

<SykiPageTitle Title="Professores" />

<MudContainer Class="my-4 px-4">
    <SykiPageHeader Icon="@Icons.Material.Filled.Person4" Title="Professores" ButtonText="Novo Professor" OnClick="@OpenDialog"/>
    <SykiPageAlert Text="Um professor pode lecionar várias disciplinas ao longo de um período, inclusive em mais de um campus." />
    <MudContainer Class="px-0 mb-4">




        <MudDataGrid
            Class="pa-4"
            Items="@_teachers"
            QuickFilter="@_quickFilter"
            Hover="true"
            Loading="@_loading"
            Dense="true"
            RowsPerPage="10"
        >
            <ToolBarContent>
                <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por nome ou email" />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Nome" />
                <PropertyColumn Property="x => x.Email" Title="Email" />
            </Columns>
            <NoRecordsContent>
                @(GetNotFoundMessage())
            </NoRecordsContent>
            <PagerContent>
                <SykiDataGridPager T="TeacherOut" />
            </PagerContent>
        </MudDataGrid>




    </MudContainer>
</MudContainer>

@inject IDialogService DialogService
@inject GetTeachersClient GetTeachersClient
@inject IBrowserViewportService BrowserViewportService

@code
{
    private bool _loading;
    private string _searchString;
    private List<TeacherOut> _teachers = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _teachers = await GetTeachersClient.Get();
        _loading = false;
    }

    private Func<TeacherOut, bool> _quickFilter => x => _searchString.IsIn(x.Name, x.Email);

    private async Task OpenDialog()
    {
        var breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();
        var options = new DialogOptions {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            FullScreen = breakpoint == Breakpoint.Xs,
        };
        var dialog = await DialogService.ShowAsync<CreateTeacherDialog>("", options);

        var result = await dialog.Result;

        if (result!.Canceled) return;
        
        await OnInitializedAsync();
    }

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem professores cadastrados ainda." : "Nenhum professor encontrado.";
    }
}
