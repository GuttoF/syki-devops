@using Syki.Front.Features.Teacher.CreateLessonAttendance

@namespace Syki.Front.Pages.Teacher

<MudContainer Class="mb-8 px-4">
    <MudCard Class="mb-4 pa-2">
        <MudCardContent Class="py-1">
            <MudGrid Class="align-center">
                <MudItem xs="12" sm="6" md="6" lg="6">
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.Class" Class="mr-1 mb-1" Size="Size.Medium"/>
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                            <MudText Typo="Typo.h6">Aula @_lesson.Number <b>·</b> @_lesson.Date.FormatBr() <b>·</b> @_lesson.Schedule</MudText>
                        </MudStack>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" sm="4" md="4" lg="4">
                    <MudProgressLinear Color="Color.Primary" Rounded="true" Size="Size.Large" Value="@decimal.ToDouble(_lesson.Frequency)" Style="height: 24px">
                        <MudText Typo="Typo.body1">
                            <b>@_lesson.Frequency.Format()%</b>
                        </MudText>
                    </MudProgressLinear>
                </MudItem>
                <MudItem xs="12" sm="2" md="2" lg="2" Class="d-flex justify-end">
                    <MudButton
                        StartIcon="@Icons.Material.Outlined.Edit"
                        IconSize="Size.Large"
                        Variant="Variant.Filled"
                        Style="height: 40px;"
                        Color="Color.Primary"
                        @onclick="@OnEditLessonClick">
                        Editar
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
    <MudTable
        T="GetTeacherLessonAttendanceOut"
        Class="pa-4"
        Items="@_attendances"
        Filter="@_quickFilter"
        Hover="true"
        Dense="true"
        Loading="@_loading"
        RowsPerPage="100"
        ContainerClass="pt-6"
    >
        <ToolBarContent>
            <MudGrid Class="align-center">
                <MudItem xs="12" sm="5" md="5" lg="5">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                        <MudButton OnClick="@SelectAll" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.CheckBox" Size="Size.Small">Todos</MudButton>
                        <MudButton OnClick="@UnselectAll" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" Size="Size.Small">Nenhum</MudButton>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" sm="7" md="7" lg="7" Class="d-flex justify-end">
                    <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por nome"/>
                </MudItem>
            </MudGrid>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Nome</MudTh>
            <MudTh>Presente</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nome">@context.StudentName</MudTd>
            <MudTd DataLabel="Presente">
                <MudCheckBox
                    T="bool"
                    Class="pl-7 pr-1"
                    Dense="true"
                    Size="Size.Small"
                    Color="Color.Success"
                    Value="@context.Present"
                    ValueChanged="x => { context.Present = x; CheckChanged(); }"
                />
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            @(GetNotFoundMessage())
        </NoRecordsContent>
        <PagerContent>
            <MudDivider />
            <MudStack Row="true" Class="mt-4">
                @if (!_unchanged)
                {
                    <MudAlert Class="ml-2" Dense="true" Severity="Severity.Warning" Variant="Variant.Text" Elevation="1">
                        <MudText>Alterações pendentes</MudText>
                    </MudAlert>
                }
                <MudSpacer/>
                <DialogSaveButton Class="mr-2" OnClick="@SaveFrequency" @bind-Disabled="@_unchanged"/>
            </MudStack>
        </PagerContent>
    </MudTable>
</MudContainer>

<ClassLessonsDialog @ref="@_dialog" OnRowClick="@SetLesson" />

@inject ISnackbar Snackbar
@inject GetTeacherClassClient GetTeacherClassClient
@inject CreateLessonAttendanceClient CreateLessonAttendanceClient
@inject GetTeacherLessonAttendancesClient GetTeacherLessonAttendancesClient

@code
{
	[Parameter]
	public Guid ClassId { get; set; }

    private ClassLessonsDialog _dialog;

    private bool _loading;
    private string _searchString;
    private TeacherClassOut _class = new();
    private LessonOut _lesson = new();
    private List<GetTeacherLessonAttendanceOut> _attendances = [];

    private List<Guid> _initialState = [];
    private bool _unchanged = true;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _class = await GetTeacherClassClient.Get(ClassId);
        var id = _class.Lessons.Where(x => x.Date <= DateTime.Now.ToDateOnly()).MaxBy(x => x.Date)?.Id ?? Guid.Empty;
        await SetLesson(id);
        _loading = false;
    }

    private async Task SetLesson(Guid id)
    {
        _lesson = _class.Lessons.FirstOrDefault(x => x.Id == id) ?? new();
        _attendances = await GetTeacherLessonAttendancesClient.Get(id);
        _initialState = _attendances.Where(x => x.Present).Select(x => x.StudentId).ToList();
        _unchanged = true;
    }

    private void SelectAll()
    {
        _attendances.ForEach(x => x.Present = true);
        CheckChanged();
    }
    private void UnselectAll()
    {
        _attendances.ForEach(x => x.Present = false);
        CheckChanged();
    }

    private void CheckChanged()
    {
        var current = _attendances.Where(x => x.Present).Select(x => x.StudentId).ToList();
        var sameSize = current.Count == _initialState.Count;
        _unchanged = sameSize && current.IsSubsetOf(_initialState);
        _lesson.Frequency = GetCurrentFrequency();
    }

    private decimal GetCurrentFrequency()
    {
        var total = _attendances.Count;
        if (total == 0) return 0.00M;
        var presences = _attendances.Count(x => x.Present);
        return 100M*(1M * presences / (1M * total));
    }

    private void OnEditLessonClick()
    {
        _dialog.Open(_class.Lessons);
    }

    private async Task SaveFrequency()
    {
        var ids = _attendances.Where(x => x.Present).Select(x => x.StudentId).ToList();
        var result = await CreateLessonAttendanceClient.Create(_lesson.Id, ids);
        if (result.IsSuccess())
        {
            _class = await GetTeacherClassClient.Get(ClassId);
            _initialState = _attendances.Where(x => x.Present).Select(x => x.StudentId).ToList();
            _unchanged = true;
            Snackbar.Add("Chamada salva com sucesso!", Severity.Success);
        }
        else
        {
            Snackbar.Add(result.GetError().Message, Severity.Error);
        }
    }

    private Func<GetTeacherLessonAttendanceOut, bool> _quickFilter => x => _searchString.IsIn(x.StudentName);

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem alunos matriculados ainda." : "Nenhum aluno encontrado.";
    }
}
