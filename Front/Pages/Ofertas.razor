@page "/ofertas"
@attribute [Authorize(Roles = "Academico")]

<PageTitle>Ofertas</PageTitle>

<MudContainer>
    <SykiPageHeader Icon="@Icons.Material.Filled.PlaylistAddCheck" Title="Ofertas" ButtonText="Nova Oferta" OnClick="OpenDialog"/>

    <MudAlert Class="mt-4 mb-4 mx-6 pl-6" Severity="Severity.Normal" Variant="Variant.Text">
        <MudText>Uma oferta de curso pode acontecer a cada período, com variações de campus e de turno.</MudText>
    </MudAlert>

    <MudContainer Class="mb-8">
        <MudDataGrid Class="pa-4" Items="@_ofertas" QuickFilter="@_quickFilter" Hover="true" Loading="_loading" Dense="true" RowsPerPage="10">
            <ToolBarContent>
                <MudSpacer />
                <MudSpacer />
                <MudTextField
                    Margin="Margin.Dense"
                    Variant="Variant.Outlined"
                    @bind-Value="_searchString"
                    Placeholder="Busque por qualquer atributo"
                    Adornment="Adornment.Start"
                    Immediate="true"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    IconSize="Size.Medium"
                    Class="mt-0"
                />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Campus" Title="Campus" />
                <PropertyColumn Property="x => x.Periodo" Title="Período" />
                <PropertyColumn Property="x => x.Turno.GetDescription()" Title="Turno" />
                <PropertyColumn Property="x => x.Curso" Title="Curso" />
                <PropertyColumn Property="x => x.Grade" Title="Grade" />
            </Columns>

            <NoRecordsContent>
                Não existem ofertas cadastradas ainda.
            </NoRecordsContent>

            <PagerContent>
                <MudDataGridPager T="OfertaOut" RowsPerPageString="Linhas por página:" InfoFormat="{first_item}-{last_item} de {all_items}" />
            </PagerContent>
        </MudDataGrid>
    </MudContainer>
</MudContainer>

@inject HttpClient Http
@inject IDialogService DialogService

@code
{
    private bool _loading;
    private string _searchString;
    private List<OfertaOut> _ofertas = [];

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _ofertas = await Http.GetFromJsonAsync<List<OfertaOut>>("/ofertas") ?? [];
        _loading = false;
    }

    private Func<OfertaOut, bool> _quickFilter => x =>
        _searchString.IsIn(x.Campus, x.Periodo, x.Turno.GetDescription(), x.Curso, x.Grade);

    private async Task OpenDialog()
    {
        var options = new DialogOptions {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
        };
        var dialog = await DialogService.ShowAsync<NewOfertaDialog>("", options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        
        await OnInitializedAsync();
    }
}
