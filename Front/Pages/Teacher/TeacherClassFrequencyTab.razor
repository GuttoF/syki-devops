@using Syki.Front.Components.Custom
@using Syki.Front.Components.Buttons
@using Syki.Front.Features.Teacher.CreateLessonAttendance

@namespace Syki.Front.Pages.Teacher

<MudContainer Class="mb-8">
    <MudCard Class="mb-4 px-2">
        <MudCardContent Class="py-1">
            <MudStack Row="true" AlignItems="AlignItems.Center">
                <MudIcon Icon="@Icons.Material.Filled.Class" Class="mr-1 mb-1" Size="Size.Medium"/>
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                    <MudText Typo="Typo.h6">Aula @_lesson.Number</MudText>
                    <MudText Typo="Typo.h3">·</MudText>
                    <MudText Typo="Typo.h6">@_lesson.Date.FormatBr()</MudText>
                    <MudText Typo="Typo.h3">·</MudText>
                    <MudText Typo="Typo.h6">@_lesson.Schedule</MudText>
                </MudStack>
                <MudSpacer />
                <MudButton
                    StartIcon="@Icons.Material.Outlined.Edit"
                    IconSize="Size.Large"
                    Variant="Variant.Filled"
                    Style="height: 40px;"
                    Color="Color.Primary"
                    @onclick="@OnEditLessonClick"
                >
                    Editar
                </MudButton>
            </MudStack>
        </MudCardContent>
    </MudCard>
    <MudDataGrid T="GetTeacherLessonAttendanceOut" Class="pa-4" Items="@_attendances" QuickFilter="@_quickFilter" Hover="true" Loading="@_loading" Dense="true" RowsPerPage="10">
        <ToolBarContent>
            <SykiDataGridSearchTextField @bind-Value="@_searchString" Placeholder="Busque por nome" />
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.StudentName" Title="Nome" />
            <TemplateColumn Title="Presente" CellClass="pl-11 mx-0">
                <CellTemplate>
                    <MudCheckBox
                        T="bool"
                        Dense="true"
                        Size="Size.Small"
                        Color="Color.Success"
                        Value="@context.Item.Present"
                        ValueChanged="x => { context.Item.Present = x; CheckChanged(); }"
                    />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <NoRecordsContent>
            @(GetNotFoundMessage())
        </NoRecordsContent>
        <PagerContent>
            <MudStack Row="true" Class="mt-4">
                @if (!_unchanged)
                {
                    <MudAlert Class="ml-2" Dense="true" Severity="Severity.Warning" Variant="Variant.Text" Elevation="1">
                        <MudText>Alterações pendentes</MudText>
                    </MudAlert>
                }
                <MudSpacer/>
                <DialogSaveButton Class="mr-2" OnClick="@SaveFrequency" @bind-Disabled="@_unchanged"/>
            </MudStack>
        </PagerContent>
    </MudDataGrid>
</MudContainer>

<ClassLessonsDialog @ref="@_dialog" OnRowClick="@SetLesson" />

@inject ISnackbar Snackbar
@inject GetTeacherClassClient GetTeacherClassClient
@inject CreateLessonAttendanceClient CreateLessonAttendanceClient
@inject GetTeacherLessonAttendancesClient GetTeacherLessonAttendancesClient

@code
{
	[Parameter]
	public Guid ClassId { get; set; }

    private ClassLessonsDialog _dialog;

    private bool _loading;
    private string _searchString;
    private TeacherClassOut _class = new();
    private LessonOut _lesson = new();
    private List<GetTeacherLessonAttendanceOut> _attendances = [];

    private List<Guid> _initialState = [];
    private bool _unchanged = true;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _class = await GetTeacherClassClient.Get(ClassId);
        var id = _class.Lessons.Where(x => x.Date <= DateTime.Now.ToDateOnly()).MaxBy(x => x.Date)?.Id ?? Guid.Empty;
        await SetLesson(id);
        _loading = false;
    }

    private async Task SetLesson(Guid id)
    {
        _lesson = _class.Lessons.FirstOrDefault(x => x.Id == id) ?? new();
        _attendances = await GetTeacherLessonAttendancesClient.Get(id);
        _initialState = _attendances.Where(x => x.Present).Select(x => x.StudentId).ToList();
        _unchanged = true;
    }

    private void CheckChanged()
    {
        var current = _attendances.Where(x => x.Present).Select(x => x.StudentId).ToList();
        var sameSize = current.Count == _initialState.Count;
        _unchanged = sameSize && current.IsSubsetOf(_initialState);
    }
    
    private void OnEditLessonClick()
    {
        _dialog.Open(_class.Lessons);
    }

    private async Task SaveFrequency()
    {
        var ids = _attendances.Where(x => x.Present).Select(x => x.StudentId).ToList();
        var result = await CreateLessonAttendanceClient.Create(_lesson.Id, ids);
        if (result.IsSuccess())
        {
            _initialState = _attendances.Where(x => x.Present).Select(x => x.StudentId).ToList();
            _unchanged = true;
            Snackbar.Add("Chamada salva com sucesso!", Severity.Success);
        }
        else
        {
            Snackbar.Add(result.GetError().Message, Severity.Error);
        }
    }

    private Func<GetTeacherLessonAttendanceOut, bool> _quickFilter => x => _searchString.IsIn(x.StudentName);

    private string GetNotFoundMessage()
    {
        return (_searchString.IsEmpty()) ? "Não existem alunos matriculados ainda." : "Nenhum aluno encontrado.";
    }
}
